{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  margin-bottom: 0.5rem;\\n  cursor: move;\\n  z-index: 4;\\n  opacity: 1;\\n\\n  &.isDragging {\\n    opacity: 0.5;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useRef } from 'react';\nimport cn from 'classnames';\nimport { useDrag, useDrop } from 'react-dnd';\nimport styled from 'styled-components';\nimport { ItemTypes } from './ItemTypes';\nvar StyledCard = styled.div(_templateObject());\n_c = StyledCard;\n\nvar Card = function Card(_ref) {\n  _s();\n\n  var id = _ref.id,\n      title = _ref.title,\n      listItemIndex = _ref.listItemIndex,\n      moveCard = _ref.moveCard,\n      left = _ref.left,\n      top = _ref.top,\n      boxes = _ref.boxes,\n      isListItem = _ref.isListItem,\n      updateBoxes = _ref.updateBoxes,\n      blobUrl = _ref.blobUrl,\n      children = _ref.children;\n  var ref = useRef(null);\n\n  var _useDrop = useDrop({\n    accept: ItemTypes.CARD,\n    hover: function hover(item, monitor) {\n      var _ref$current;\n\n      if (!ref.current || !item || !item.isListItem) {\n        return;\n      }\n\n      var dragIndex = item.listItemIndex;\n      var hoverIndex = listItemIndex; // Don't replace items with themselves\n\n      if (dragIndex === hoverIndex || id === item.id) {\n        return;\n      } // Determine rectangle on screen\n\n\n      var hoverBoundingRect = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.getBoundingClientRect(); // Get vertical middle\n\n      var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n      var clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n      var hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      } // Dragging upwards\n\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      } // Time to actually perform the action\n\n\n      moveCard(dragIndex, hoverIndex, Number(item.id)); // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n\n      item.listItemIndex = hoverIndex;\n    }\n  }),\n      _useDrop2 = _slicedToArray(_useDrop, 2),\n      drop = _useDrop2[1];\n\n  var _useDrag = useDrag({\n    item: {\n      type: ItemTypes.CARD,\n      id: id,\n      listItemIndex: listItemIndex,\n      isListItem: isListItem,\n      title: title,\n      top: top,\n      left: left,\n      ref: ref,\n      blobUrl: blobUrl\n    },\n    collect: function collect(monitor) {\n      return {\n        isDragging: monitor.isDragging()\n      };\n    }\n  }),\n      _useDrag2 = _slicedToArray(_useDrag, 2),\n      isDragging = _useDrag2[0].isDragging,\n      drag = _useDrag2[1];\n\n  drag(drop(ref));\n  return /*#__PURE__*/React.createElement(StyledCard, {\n    ref: ref,\n    className: cn('listItem', {\n      isDragging: isDragging\n    })\n  }, children);\n};\n\n_s(Card, \"SYYd1my1HJmIW9rZNaWEabF/XNs=\", false, function () {\n  return [useDrop, useDrag];\n});\n\n_c2 = Card;\nexport default Card;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledCard\");\n$RefreshReg$(_c2, \"Card\");","map":{"version":3,"sources":["/Users/mfjvacas/Documents/Dev/GitHub/projects/mapstereo-client/components/ListItem.tsx"],"names":["React","useRef","cn","useDrag","useDrop","styled","ItemTypes","StyledCard","div","Card","id","title","listItemIndex","moveCard","left","top","boxes","isListItem","updateBoxes","blobUrl","children","ref","accept","CARD","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","clientOffset","getClientOffset","hoverClientY","y","Number","drop","type","collect","isDragging","drag"],"mappings":"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","sourcesContent":["import React, { useRef, SetStateAction, Dispatch } from 'react';\nimport cn from 'classnames';\nimport { useDrag, useDrop, DropTargetMonitor } from 'react-dnd';\nimport { XYCoord } from 'dnd-core';\nimport styled from 'styled-components';\nimport { ItemTypes } from './ItemTypes';\n\nexport interface CardProps {\n  id: any;\n  title: string;\n  listItemIndex: number;\n  left?: number;\n  top?: number;\n  blobUrl?: string;\n  moveCard: (\n    dragIndex: number,\n    hoverIndex: number,\n    cardId: number\n  ) => void;\n  boxes: Array<any>;\n  isListItem?: boolean;\n  updateBoxes?: Dispatch<SetStateAction<Array<any>>>;\n  children?: React.ReactElement;\n}\n\ninterface DragItem {\n  index: number;\n  id: string;\n  type: string;\n  isListItem: boolean;\n  listItemIndex: number;\n}\n\nconst StyledCard = styled.div`\n  position: relative;\n  margin-bottom: 0.5rem;\n  cursor: move;\n  z-index: 4;\n  opacity: 1;\n\n  &.isDragging {\n    opacity: 0.5;\n  }\n`;\n\nconst Card: React.FC<CardProps> = ({\n  id,\n  title,\n  listItemIndex,\n  moveCard,\n  left,\n  top,\n  boxes,\n  isListItem,\n  updateBoxes,\n  blobUrl,\n  children\n}: CardProps) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    hover(item: DragItem, monitor: DropTargetMonitor) {\n      if (!ref.current || !item || !item.isListItem) {\n        return;\n      }\n      \n      const dragIndex = item.listItemIndex;\n      const hoverIndex = listItemIndex;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex || id === item.id) {\n        return;\n      }\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n\n      // Get pixels to the top\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Time to actually perform the action\n      moveCard(dragIndex, hoverIndex, Number(item.id));\n\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.listItemIndex = hoverIndex;\n    },\n  });\n\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      type: ItemTypes.CARD,\n      id,\n      listItemIndex,\n      isListItem,\n      title,\n      top,\n      left,\n      ref,\n      blobUrl,\n    },\n    collect: (monitor: any) => ({\n      isDragging: monitor.isDragging(),\n    })\n  });\n\n  drag(drop(ref));\n\n  return (\n    <StyledCard\n      ref={ref}\n      className={cn('listItem', {\n        isDragging,\n      })}\n    >\n      {children}\n    </StyledCard>\n  );\n};\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}