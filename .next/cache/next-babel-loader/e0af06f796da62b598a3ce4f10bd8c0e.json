{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = exports.INITIAL_CSS_LOAD_ERROR = exports.looseToArray = void 0;\n\nvar _mitt = _interopRequireDefault(require(\"../next-server/lib/mitt\"));\n\nvar _router = require(\"../next-server/lib/router/router\");\n\nvar _getAssetPathFromRoute = _interopRequireDefault(require(\"../next-server/lib/router/utils/get-asset-path-from-route\"));\n\nvar _isDynamic = require(\"../next-server/lib/router/utils/is-dynamic\");\n\nvar _parseRelativeUrl = require(\"../next-server/lib/router/utils/parse-relative-url\");\n\nconst looseToArray = input => [].slice.call(input);\n\nexports.looseToArray = looseToArray;\n\nfunction hasRel(rel, link) {\n  try {\n    link = document.createElement('link');\n    return link.relList.supports(rel);\n  } catch (_unused) {}\n}\n\nfunction pageLoadError(route) {\n  return (0, _router.markLoadingError)(new Error(`Error loading ${route}`));\n}\n\nconst INITIAL_CSS_LOAD_ERROR = Symbol('INITIAL_CSS_LOAD_ERROR');\nexports.INITIAL_CSS_LOAD_ERROR = INITIAL_CSS_LOAD_ERROR;\nconst relPrefetch = hasRel('preload') && !hasRel('prefetch') ? // https://caniuse.com/#feat=link-rel-preload\n// macOS and iOS (Safari does not support prefetch)\n'preload' : // https://caniuse.com/#feat=link-rel-prefetch\n// IE 11, Edge 12+, nearly all evergreen\n'prefetch';\nconst relPreload = hasRel('preload') ? 'preload' : relPrefetch;\nconst relPreloadStyle = 'fetch';\nconst hasNoModule = ('noModule' in document.createElement('script'));\n\nfunction normalizeRoute(route) {\n  if (route[0] !== '/') {\n    throw new Error(`Route name should start with a \"/\", got \"${route}\"`);\n  }\n\n  if (route === '/') return route;\n  return route.replace(/\\/$/, '');\n}\n\nfunction appendLink(href, rel, as, link) {\n  return new Promise((res, rej) => {\n    link = document.createElement('link'); // The order of property assignment here is intentional:\n\n    if (as) link.as = as;\n    link.rel = rel;\n    link.crossOrigin = process.env.__NEXT_CROSS_ORIGIN;\n    link.onload = res;\n    link.onerror = rej; // `href` should always be last:\n\n    link.href = href;\n    document.head.appendChild(link);\n  });\n}\n\nfunction loadScript(url) {\n  return new Promise((res, rej) => {\n    const script = document.createElement('script');\n\n    if (process.env.__NEXT_MODERN_BUILD && hasNoModule) {\n      script.type = 'module';\n    }\n\n    script.crossOrigin = process.env.__NEXT_CROSS_ORIGIN;\n    script.src = url;\n    script.onload = res;\n\n    script.onerror = () => rej(pageLoadError(url));\n\n    document.body.appendChild(script);\n  });\n}\n\nclass PageLoader {\n  constructor(buildId, assetPrefix, initialPage) {\n    this.initialPage = void 0;\n    this.buildId = void 0;\n    this.assetPrefix = void 0;\n    this.pageCache = void 0;\n    this.pageRegisterEvents = void 0;\n    this.loadingRoutes = void 0;\n    this.promisedBuildManifest = void 0;\n    this.promisedSsgManifest = void 0;\n    this.promisedDevPagesManifest = void 0;\n    this.initialPage = initialPage;\n    this.buildId = buildId;\n    this.assetPrefix = assetPrefix;\n    this.pageCache = {};\n    this.pageRegisterEvents = (0, _mitt.default)();\n    this.loadingRoutes = {\n      // By default these 2 pages are being loaded in the initial html\n      '/_app': true\n    }; // TODO: get rid of this limitation for rendering the error page\n\n    if (initialPage !== '/_error') {\n      this.loadingRoutes[initialPage] = true;\n    }\n\n    this.promisedBuildManifest = new Promise(resolve => {\n      if (window.__BUILD_MANIFEST) {\n        resolve(window.__BUILD_MANIFEST);\n      } else {\n        ;\n\n        window.__BUILD_MANIFEST_CB = () => {\n          resolve(window.__BUILD_MANIFEST);\n        };\n      }\n    });\n    /** @type {Promise<Set<string>>} */\n\n    this.promisedSsgManifest = new Promise(resolve => {\n      if (window.__SSG_MANIFEST) {\n        resolve(window.__SSG_MANIFEST);\n      } else {\n        ;\n\n        window.__SSG_MANIFEST_CB = () => {\n          resolve(window.__SSG_MANIFEST);\n        };\n      }\n    });\n  }\n\n  getPageList() {\n    if (false) {\n      return this.promisedBuildManifest.then(buildManifest => buildManifest.sortedPages);\n    } else {\n      if (window.__DEV_PAGES_MANIFEST) {\n        return window.__DEV_PAGES_MANIFEST.pages;\n      } else {\n        if (!this.promisedDevPagesManifest) {\n          this.promisedDevPagesManifest = fetch(`${this.assetPrefix}/_next/static/development/_devPagesManifest.json`).then(res => res.json()).then(manifest => {\n            ;\n            window.__DEV_PAGES_MANIFEST = manifest;\n            return manifest.pages;\n          }).catch(err => {\n            console.log(`Failed to fetch devPagesManifest`, err);\n          });\n        }\n\n        return this.promisedDevPagesManifest;\n      }\n    }\n  } // Returns a promise for the dependencies for a particular route\n\n\n  getDependencies(route) {\n    return this.promisedBuildManifest.then(m => {\n      return m[route] ? m[route].map(url => `${this.assetPrefix}/_next/${encodeURI(url)}`) : Promise.reject(pageLoadError(route));\n    });\n  }\n  /**\n  * @param {string} href the route href (file-system path)\n  * @param {string} asPath the URL as shown in browser (virtual path); used for dynamic routes\n  */\n\n\n  getDataHref(href, asPath, ssg, locale) {\n    const {\n      pathname: hrefPathname,\n      query,\n      search\n    } = (0, _parseRelativeUrl.parseRelativeUrl)(href);\n    const {\n      pathname: asPathname\n    } = (0, _parseRelativeUrl.parseRelativeUrl)(asPath);\n    const route = normalizeRoute(hrefPathname);\n\n    const getHrefForSlug = path => {\n      const dataRoute = (0, _router.addLocale)((0, _getAssetPathFromRoute.default)(path, '.json'), locale);\n      return (0, _router.addBasePath)(`/_next/data/${this.buildId}${dataRoute}${ssg ? '' : search}`);\n    };\n\n    const isDynamic = (0, _isDynamic.isDynamicRoute)(route);\n    const interpolatedRoute = isDynamic ? (0, _router.interpolateAs)(hrefPathname, asPathname, query).result : '';\n    return isDynamic ? interpolatedRoute && getHrefForSlug(interpolatedRoute) : getHrefForSlug(route);\n  }\n  /**\n  * @param {string} href the route href (file-system path)\n  * @param {string} asPath the URL as shown in browser (virtual path); used for dynamic routes\n  */\n\n\n  prefetchData(href, asPath, locale) {\n    const {\n      pathname: hrefPathname\n    } = (0, _parseRelativeUrl.parseRelativeUrl)(href);\n    const route = normalizeRoute(hrefPathname);\n    return this.promisedSsgManifest.then((s, _dataHref) => // Check if the route requires a data file\n    s.has(route) && ( // Try to generate data href, noop when falsy\n    _dataHref = this.getDataHref(href, asPath, true, locale)) && // noop when data has already been prefetched (dedupe)\n    !document.querySelector(`link[rel=\"${relPrefetch}\"][href^=\"${_dataHref}\"]`) && // Inject the `<link rel=prefetch>` tag for above computed `href`.\n    appendLink(_dataHref, relPrefetch, 'fetch').catch(() => {\n      /* ignore prefetch error */\n    }));\n  }\n\n  loadPage(route) {\n    route = normalizeRoute(route);\n    return new Promise((resolve, reject) => {\n      // If there's a cached version of the page, let's use it.\n      const cachedPage = this.pageCache[route];\n\n      if (cachedPage) {\n        if ('error' in cachedPage) {\n          reject(cachedPage.error);\n        } else {\n          resolve(cachedPage);\n        }\n\n        return;\n      }\n\n      const fire = pageToCache => {\n        this.pageRegisterEvents.off(route, fire);\n        delete this.loadingRoutes[route];\n\n        if ('error' in pageToCache) {\n          reject(pageToCache.error);\n        } else {\n          resolve(pageToCache);\n        }\n      }; // Register a listener to get the page\n\n\n      this.pageRegisterEvents.on(route, fire);\n\n      if (!this.loadingRoutes[route]) {\n        this.loadingRoutes[route] = true;\n\n        if (false) {\n          this.getDependencies(route).then(deps => {\n            const pending = [];\n            deps.forEach(d => {\n              if (d.endsWith('.js') && !document.querySelector(`script[src^=\"${d}\"]`)) {\n                pending.push(loadScript(d));\n              } // Prefetch CSS as it'll be needed when the page JavaScript\n              // evaluates. This will only trigger if explicit prefetching is\n              // disabled for a <Link>... prefetching in this case is desirable\n              // because we *know* it's going to be used very soon (page was\n              // loaded).\n\n\n              if (d.endsWith('.css') && !document.querySelector(`link[rel=\"${relPreload}\"][href^=\"${d}\"]`)) {\n                // This is not pushed into `pending` because we don't need to\n                // wait for these to resolve. To prevent an unhandled\n                // rejection, we swallow the error which is handled later in\n                // the rendering cycle (this is just a preload optimization).\n                appendLink(d, relPreload, relPreloadStyle).catch(() => {\n                  /* ignore preload error */\n                });\n              }\n            });\n            return Promise.all(pending);\n          }).catch(err => {\n            // Mark the page as failed to load if any of its required scripts\n            // fail to load:\n            this.pageCache[route] = {\n              error: err\n            };\n            fire({\n              error: err\n            });\n          });\n        } else {\n          // Development only. In production the page file is part of the build manifest\n          route = normalizeRoute(route);\n          let scriptRoute = (0, _getAssetPathFromRoute.default)(route, '.js');\n          const url = `${this.assetPrefix}/_next/static/chunks/pages${encodeURI(scriptRoute)}`;\n          loadScript(url).catch(err => {\n            // Mark the page as failed to load if its script fails to load:\n            this.pageCache[route] = {\n              error: err\n            };\n            fire({\n              error: err\n            });\n          });\n        }\n      }\n    });\n  } // This method if called by the route code.\n\n\n  registerPage(route, regFn) {\n    var _this = this;\n\n    const register = async function register(styleSheets) {\n      try {\n        const mod = await regFn();\n        const pageData = {\n          page: mod.default || mod,\n          mod,\n          styleSheets\n        };\n        _this.pageCache[route] = pageData;\n\n        _this.pageRegisterEvents.emit(route, pageData);\n      } catch (error) {\n        _this.pageCache[route] = {\n          error\n        };\n\n        _this.pageRegisterEvents.emit(route, {\n          error\n        });\n      }\n    };\n\n    if (true) {\n      // Wait for webpack to become idle if it's not.\n      // More info: https://github.com/vercel/next.js/pull/1511\n      if (module.hot && module.hot.status() !== 'idle') {\n        console.log(`Waiting for webpack to become \"idle\" to initialize the page: \"${route}\"`);\n\n        const check = status => {\n          if (status === 'idle') {\n            ;\n            module.hot.removeStatusHandler(check);\n            register(\n            /* css is handled via style-loader in development */\n            []);\n          }\n        };\n\n        module.hot.status(check);\n        return;\n      }\n    }\n\n    function fetchStyleSheet(href) {\n      return fetch(href).then(res => {\n        if (!res.ok) throw pageLoadError(href);\n        return res.text().then(text => ({\n          href,\n          text\n        }));\n      });\n    }\n\n    const isInitialLoad = route === this.initialPage;\n    const promisedDeps = // Shared styles will already be on the page:\n    route === '/_app' || // We use `style-loader` in development:\n    true ? Promise.resolve([]) : // Tests that this does not block hydration:\n    // test/integration/css-fixtures/hydrate-without-deps/\n    (isInitialLoad ? Promise.resolve(looseToArray(document.querySelectorAll('link[data-n-p]')).map(e => e.getAttribute('href'))) : this.getDependencies(route).then(deps => deps.filter(d => d.endsWith('.css')))).then(cssFiles => // These files should've already been fetched by now, so this\n    // should resolve instantly.\n    Promise.all(cssFiles.map(d => fetchStyleSheet(d))).catch(err => {\n      if (isInitialLoad) {\n        Object.defineProperty(err, INITIAL_CSS_LOAD_ERROR, {});\n      }\n\n      throw err;\n    }));\n    promisedDeps.then(deps => register(deps), error => {\n      this.pageCache[route] = {\n        error\n      };\n      this.pageRegisterEvents.emit(route, {\n        error\n      });\n    });\n  }\n  /**\n  * @param {string} route\n  * @param {boolean} [isDependency]\n  */\n\n\n  prefetch(route, isDependency) {\n    // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118\n    // License: Apache 2.0\n    let cn;\n\n    if (cn = navigator.connection) {\n      // Don't prefetch if using 2G or if Save-Data is enabled.\n      if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();\n    }\n    /** @type {string} */\n\n\n    let url;\n\n    if (isDependency) {\n      url = route;\n    } else {\n      if (true) {\n        route = normalizeRoute(route);\n        const ext = process.env.__NEXT_MODERN_BUILD && hasNoModule ? '.module.js' : '.js';\n        const scriptRoute = (0, _getAssetPathFromRoute.default)(route, ext);\n        url = `${this.assetPrefix}/_next/static/${encodeURIComponent(this.buildId)}/pages${encodeURI(scriptRoute)}`;\n      }\n    }\n\n    return Promise.all(document.querySelector(`link[rel=\"${relPrefetch}\"][href^=\"${url}\"]`) ? [] : [url && appendLink(url, relPrefetch, url.endsWith('.css') ? relPreloadStyle : 'script'), false && !isDependency && this.getDependencies(route).then(urls => Promise.all(urls.map(dependencyUrl => this.prefetch(dependencyUrl, true))))]).then( // do not return any data\n    () => {}, // swallow prefetch errors\n    () => {});\n  }\n\n}\n\nexports.default = PageLoader;","map":{"version":3,"sources":["../../client/page-loader.ts"],"names":["looseToArray","input","link","document","route","INITIAL_CSS_LOAD_ERROR","Symbol","relPrefetch","hasRel","relPreload","relPreloadStyle","hasNoModule","process","script","rej","pageLoadError","PageLoader","initialPage","buildId","assetPrefix","pageCache","pageRegisterEvents","loadingRoutes","promisedBuildManifest","promisedSsgManifest","promisedDevPagesManifest","constructor","resolve","window","getPageList","buildManifest","fetch","res","manifest","err","console","getDependencies","m","url","encodeURI","Promise","getDataHref","pathname","normalizeRoute","getHrefForSlug","path","dataRoute","ssg","search","isDynamic","interpolatedRoute","prefetchData","s","_dataHref","appendLink","loadPage","cachedPage","reject","fire","pageToCache","deps","pending","d","loadScript","error","scriptRoute","registerPage","register","mod","regFn","pageData","page","module","check","status","text","isInitialLoad","promisedDeps","e","cssFiles","fetchStyleSheet","Object","prefetch","cn","navigator","ext","encodeURIComponent","urls","dependencyUrl"],"mappings":"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","sourcesContent":["import { ComponentType } from 'react'\nimport type { ClientSsgManifest } from '../build'\nimport type { ClientBuildManifest } from '../build/webpack/plugins/build-manifest-plugin'\nimport type { MittEmitter } from '../next-server/lib/mitt'\nimport mitt from '../next-server/lib/mitt'\nimport {\n  addBasePath,\n  addLocale,\n  interpolateAs,\n  markLoadingError,\n} from '../next-server/lib/router/router'\nimport getAssetPathFromRoute from '../next-server/lib/router/utils/get-asset-path-from-route'\nimport { isDynamicRoute } from '../next-server/lib/router/utils/is-dynamic'\nimport { parseRelativeUrl } from '../next-server/lib/router/utils/parse-relative-url'\n\nexport const looseToArray = <T extends {}>(input: any): T[] =>\n  [].slice.call(input)\n\nfunction hasRel(rel: string, link?: HTMLLinkElement) {\n  try {\n    link = document.createElement('link')\n    return link.relList.supports(rel)\n  } catch {}\n}\n\nfunction pageLoadError(route: string) {\n  return markLoadingError(new Error(`Error loading ${route}`))\n}\n\nexport const INITIAL_CSS_LOAD_ERROR = Symbol('INITIAL_CSS_LOAD_ERROR')\n\nconst relPrefetch =\n  hasRel('preload') && !hasRel('prefetch')\n    ? // https://caniuse.com/#feat=link-rel-preload\n      // macOS and iOS (Safari does not support prefetch)\n      'preload'\n    : // https://caniuse.com/#feat=link-rel-prefetch\n      // IE 11, Edge 12+, nearly all evergreen\n      'prefetch'\n\nconst relPreload = hasRel('preload') ? 'preload' : relPrefetch\nconst relPreloadStyle = 'fetch'\n\nconst hasNoModule = 'noModule' in document.createElement('script')\n\nfunction normalizeRoute(route: string) {\n  if (route[0] !== '/') {\n    throw new Error(`Route name should start with a \"/\", got \"${route}\"`)\n  }\n\n  if (route === '/') return route\n  return route.replace(/\\/$/, '')\n}\n\nfunction appendLink(\n  href: string,\n  rel: string,\n  as?: string,\n  link?: HTMLLinkElement\n): Promise<any> {\n  return new Promise((res, rej) => {\n    link = document.createElement('link')\n\n    // The order of property assignment here is intentional:\n    if (as) link!.as = as\n    link!.rel = rel\n    link!.crossOrigin = process.env.__NEXT_CROSS_ORIGIN!\n    link!.onload = res\n    link!.onerror = rej\n\n    // `href` should always be last:\n    link!.href = href\n\n    document.head.appendChild(link)\n  })\n}\n\nfunction loadScript(url: string): Promise<any> {\n  return new Promise((res, rej) => {\n    const script = document.createElement('script')\n    if (process.env.__NEXT_MODERN_BUILD && hasNoModule) {\n      script.type = 'module'\n    }\n    script.crossOrigin = process.env.__NEXT_CROSS_ORIGIN!\n    script.src = url\n    script.onload = res\n    script.onerror = () => rej(pageLoadError(url))\n    document.body.appendChild(script)\n  })\n}\n\nexport type StyleSheetTuple = { href: string; text: string }\nexport type GoodPageCache = {\n  page: ComponentType\n  mod: any\n  styleSheets: StyleSheetTuple[]\n}\nexport type PageCacheEntry = { error: any } | GoodPageCache\n\nexport default class PageLoader {\n  private initialPage: string\n  private buildId: string\n  private assetPrefix: string\n  private pageCache: Record<string, PageCacheEntry>\n  private pageRegisterEvents: MittEmitter\n  private loadingRoutes: Record<string, boolean>\n  private promisedBuildManifest?: Promise<ClientBuildManifest>\n  private promisedSsgManifest?: Promise<ClientSsgManifest>\n  private promisedDevPagesManifest?: Promise<any>\n\n  constructor(buildId: string, assetPrefix: string, initialPage: string) {\n    this.initialPage = initialPage\n\n    this.buildId = buildId\n    this.assetPrefix = assetPrefix\n\n    this.pageCache = {}\n    this.pageRegisterEvents = mitt()\n    this.loadingRoutes = {\n      // By default these 2 pages are being loaded in the initial html\n      '/_app': true,\n    }\n\n    // TODO: get rid of this limitation for rendering the error page\n    if (initialPage !== '/_error') {\n      this.loadingRoutes[initialPage] = true\n    }\n\n    this.promisedBuildManifest = new Promise((resolve) => {\n      if ((window as any).__BUILD_MANIFEST) {\n        resolve((window as any).__BUILD_MANIFEST)\n      } else {\n        ;(window as any).__BUILD_MANIFEST_CB = () => {\n          resolve((window as any).__BUILD_MANIFEST)\n        }\n      }\n    })\n\n    /** @type {Promise<Set<string>>} */\n    this.promisedSsgManifest = new Promise((resolve) => {\n      if ((window as any).__SSG_MANIFEST) {\n        resolve((window as any).__SSG_MANIFEST)\n      } else {\n        ;(window as any).__SSG_MANIFEST_CB = () => {\n          resolve((window as any).__SSG_MANIFEST)\n        }\n      }\n    })\n  }\n\n  getPageList() {\n    if (process.env.NODE_ENV === 'production') {\n      return this.promisedBuildManifest!.then(\n        (buildManifest) => buildManifest.sortedPages\n      )\n    } else {\n      if ((window as any).__DEV_PAGES_MANIFEST) {\n        return (window as any).__DEV_PAGES_MANIFEST.pages\n      } else {\n        if (!this.promisedDevPagesManifest) {\n          this.promisedDevPagesManifest = fetch(\n            `${this.assetPrefix}/_next/static/development/_devPagesManifest.json`\n          )\n            .then((res) => res.json())\n            .then((manifest) => {\n              ;(window as any).__DEV_PAGES_MANIFEST = manifest\n              return manifest.pages\n            })\n            .catch((err) => {\n              console.log(`Failed to fetch devPagesManifest`, err)\n            })\n        }\n        return this.promisedDevPagesManifest\n      }\n    }\n  }\n\n  // Returns a promise for the dependencies for a particular route\n  private getDependencies(route: string): Promise<string[]> {\n    return this.promisedBuildManifest!.then((m) => {\n      return m[route]\n        ? m[route].map((url) => `${this.assetPrefix}/_next/${encodeURI(url)}`)\n        : Promise.reject(pageLoadError(route))\n    })\n  }\n\n  /**\n   * @param {string} href the route href (file-system path)\n   * @param {string} asPath the URL as shown in browser (virtual path); used for dynamic routes\n   */\n  getDataHref(\n    href: string,\n    asPath: string,\n    ssg: boolean,\n    locale?: string | false\n  ) {\n    const { pathname: hrefPathname, query, search } = parseRelativeUrl(href)\n    const { pathname: asPathname } = parseRelativeUrl(asPath)\n    const route = normalizeRoute(hrefPathname)\n\n    const getHrefForSlug = (path: string) => {\n      const dataRoute = addLocale(getAssetPathFromRoute(path, '.json'), locale)\n      return addBasePath(\n        `/_next/data/${this.buildId}${dataRoute}${ssg ? '' : search}`\n      )\n    }\n\n    const isDynamic: boolean = isDynamicRoute(route)\n    const interpolatedRoute = isDynamic\n      ? interpolateAs(hrefPathname, asPathname, query).result\n      : ''\n\n    return isDynamic\n      ? interpolatedRoute && getHrefForSlug(interpolatedRoute)\n      : getHrefForSlug(route)\n  }\n\n  /**\n   * @param {string} href the route href (file-system path)\n   * @param {string} asPath the URL as shown in browser (virtual path); used for dynamic routes\n   */\n  prefetchData(href: string, asPath: string, locale?: string | false) {\n    const { pathname: hrefPathname } = parseRelativeUrl(href)\n    const route = normalizeRoute(hrefPathname)\n    return this.promisedSsgManifest!.then(\n      (s: ClientSsgManifest, _dataHref?: string) =>\n        // Check if the route requires a data file\n        s.has(route) &&\n        // Try to generate data href, noop when falsy\n        (_dataHref = this.getDataHref(href, asPath, true, locale)) &&\n        // noop when data has already been prefetched (dedupe)\n        !document.querySelector(\n          `link[rel=\"${relPrefetch}\"][href^=\"${_dataHref}\"]`\n        ) &&\n        // Inject the `<link rel=prefetch>` tag for above computed `href`.\n        appendLink(_dataHref, relPrefetch, 'fetch').catch(() => {\n          /* ignore prefetch error */\n        })\n    )\n  }\n\n  loadPage(route: string): Promise<GoodPageCache> {\n    route = normalizeRoute(route)\n\n    return new Promise<GoodPageCache>((resolve, reject) => {\n      // If there's a cached version of the page, let's use it.\n      const cachedPage = this.pageCache[route]\n      if (cachedPage) {\n        if ('error' in cachedPage) {\n          reject(cachedPage.error)\n        } else {\n          resolve(cachedPage)\n        }\n        return\n      }\n\n      const fire = (pageToCache: PageCacheEntry) => {\n        this.pageRegisterEvents.off(route, fire)\n        delete this.loadingRoutes[route]\n\n        if ('error' in pageToCache) {\n          reject(pageToCache.error)\n        } else {\n          resolve(pageToCache)\n        }\n      }\n\n      // Register a listener to get the page\n      this.pageRegisterEvents.on(route, fire)\n\n      if (!this.loadingRoutes[route]) {\n        this.loadingRoutes[route] = true\n        if (process.env.NODE_ENV === 'production') {\n          this.getDependencies(route)\n            .then((deps) => {\n              const pending: Promise<any>[] = []\n              deps.forEach((d) => {\n                if (\n                  d.endsWith('.js') &&\n                  !document.querySelector(`script[src^=\"${d}\"]`)\n                ) {\n                  pending.push(loadScript(d))\n                }\n\n                // Prefetch CSS as it'll be needed when the page JavaScript\n                // evaluates. This will only trigger if explicit prefetching is\n                // disabled for a <Link>... prefetching in this case is desirable\n                // because we *know* it's going to be used very soon (page was\n                // loaded).\n                if (\n                  d.endsWith('.css') &&\n                  !document.querySelector(\n                    `link[rel=\"${relPreload}\"][href^=\"${d}\"]`\n                  )\n                ) {\n                  // This is not pushed into `pending` because we don't need to\n                  // wait for these to resolve. To prevent an unhandled\n                  // rejection, we swallow the error which is handled later in\n                  // the rendering cycle (this is just a preload optimization).\n                  appendLink(d, relPreload, relPreloadStyle).catch(() => {\n                    /* ignore preload error */\n                  })\n                }\n              })\n              return Promise.all(pending)\n            })\n            .catch((err) => {\n              // Mark the page as failed to load if any of its required scripts\n              // fail to load:\n              this.pageCache[route] = { error: err }\n              fire({ error: err })\n            })\n        } else {\n          // Development only. In production the page file is part of the build manifest\n          route = normalizeRoute(route)\n          let scriptRoute = getAssetPathFromRoute(route, '.js')\n\n          const url = `${this.assetPrefix}/_next/static/chunks/pages${encodeURI(\n            scriptRoute\n          )}`\n          loadScript(url).catch((err) => {\n            // Mark the page as failed to load if its script fails to load:\n            this.pageCache[route] = { error: err }\n            fire({ error: err })\n          })\n        }\n      }\n    })\n  }\n\n  // This method if called by the route code.\n  registerPage(route: string, regFn: () => any) {\n    const register = async (styleSheets: StyleSheetTuple[]) => {\n      try {\n        const mod = await regFn()\n        const pageData: PageCacheEntry = {\n          page: mod.default || mod,\n          mod,\n          styleSheets,\n        }\n        this.pageCache[route] = pageData\n        this.pageRegisterEvents.emit(route, pageData)\n      } catch (error) {\n        this.pageCache[route] = { error }\n        this.pageRegisterEvents.emit(route, { error })\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Wait for webpack to become idle if it's not.\n      // More info: https://github.com/vercel/next.js/pull/1511\n      if ((module as any).hot && (module as any).hot.status() !== 'idle') {\n        console.log(\n          `Waiting for webpack to become \"idle\" to initialize the page: \"${route}\"`\n        )\n\n        const check = (status: string) => {\n          if (status === 'idle') {\n            ;(module as any).hot.removeStatusHandler(check)\n            register(\n              /* css is handled via style-loader in development */\n              []\n            )\n          }\n        }\n        ;(module as any).hot.status(check)\n        return\n      }\n    }\n\n    function fetchStyleSheet(href: string): Promise<StyleSheetTuple> {\n      return fetch(href).then((res) => {\n        if (!res.ok) throw pageLoadError(href)\n        return res.text().then((text) => ({ href, text }))\n      })\n    }\n\n    const isInitialLoad = route === this.initialPage\n    const promisedDeps: Promise<StyleSheetTuple[]> =\n      // Shared styles will already be on the page:\n      route === '/_app' ||\n      // We use `style-loader` in development:\n      process.env.NODE_ENV !== 'production'\n        ? Promise.resolve([])\n        : // Tests that this does not block hydration:\n          // test/integration/css-fixtures/hydrate-without-deps/\n          (isInitialLoad\n            ? Promise.resolve(\n                looseToArray<HTMLLinkElement>(\n                  document.querySelectorAll('link[data-n-p]')\n                ).map((e) => e.getAttribute('href')!)\n              )\n            : this.getDependencies(route).then((deps) =>\n                deps.filter((d) => d.endsWith('.css'))\n              )\n          ).then((cssFiles) =>\n            // These files should've already been fetched by now, so this\n            // should resolve instantly.\n            Promise.all(cssFiles.map((d) => fetchStyleSheet(d))).catch(\n              (err) => {\n                if (isInitialLoad) {\n                  Object.defineProperty(err, INITIAL_CSS_LOAD_ERROR, {})\n                }\n                throw err\n              }\n            )\n          )\n    promisedDeps.then(\n      (deps) => register(deps),\n      (error) => {\n        this.pageCache[route] = { error }\n        this.pageRegisterEvents.emit(route, { error })\n      }\n    )\n  }\n\n  /**\n   * @param {string} route\n   * @param {boolean} [isDependency]\n   */\n  prefetch(route: string, isDependency?: boolean): Promise<void> {\n    // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118\n    // License: Apache 2.0\n    let cn\n    if ((cn = (navigator as any).connection)) {\n      // Don't prefetch if using 2G or if Save-Data is enabled.\n      if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve()\n    }\n\n    /** @type {string} */\n    let url\n    if (isDependency) {\n      url = route\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        route = normalizeRoute(route)\n\n        const ext =\n          process.env.__NEXT_MODERN_BUILD && hasNoModule ? '.module.js' : '.js'\n        const scriptRoute = getAssetPathFromRoute(route, ext)\n\n        url = `${this.assetPrefix}/_next/static/${encodeURIComponent(\n          this.buildId\n        )}/pages${encodeURI(scriptRoute)}`\n      }\n    }\n\n    return Promise.all(\n      document.querySelector(`link[rel=\"${relPrefetch}\"][href^=\"${url}\"]`)\n        ? []\n        : [\n            url &&\n              appendLink(\n                url,\n                relPrefetch,\n                url.endsWith('.css') ? relPreloadStyle : 'script'\n              ),\n            process.env.NODE_ENV === 'production' &&\n              !isDependency &&\n              this.getDependencies(route).then((urls) =>\n                Promise.all(\n                  urls.map((dependencyUrl) =>\n                    this.prefetch(dependencyUrl, true)\n                  )\n                )\n              ),\n          ]\n    ).then(\n      // do not return any data\n      () => {},\n      // swallow prefetch errors\n      () => {}\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}