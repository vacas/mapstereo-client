{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mfjvacas/Documents/Dev/GitHub/projects/mapstereo-client/components/DraggableItems.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport update from 'immutability-helper';\nimport List from './List';\nimport Recorder from './Recorder';\nimport Box from './Box';\nimport DraggableContainer from './DraggableContainer';\n\nconst getListItemsInOrder = (boxes, cards) => {\n  const listItems = boxes && boxes.length > 0 && boxes.filter(boxItem => {\n    const listItem = cards && cards.length > 0 && cards.find(cardId => boxItem.id === cardId);\n\n    if (listItem || listItem === 0) {\n      return true;\n    }\n\n    return false;\n  }) || [];\n  let listItemsSorted = []; // sorting listItems to how list has them sorted\n\n  if (listItems && listItems.length > 0) {\n    for (let i = 0; i < cards.length; i++) {\n      const cardId = cards[i];\n      const cardObj = listItems.find(listItem => listItem.id === cardId);\n\n      if (cardObj) {\n        listItemsSorted = update(listItemsSorted, {\n          $push: [_objectSpread({}, cardObj)]\n        });\n      }\n    }\n  }\n\n  return listItemsSorted;\n};\n\nconst InternalBox = ({\n  boxes,\n  setDisableAll,\n  fullDisable,\n  currentBox,\n  updateBoxes,\n  socket\n}) => {\n  const {\n    0: playingList,\n    1: setPlayList\n  } = useState(false);\n  const {\n    title,\n    id,\n    blobUrl,\n    type,\n    cards,\n    isListItem\n  } = currentBox;\n\n  const deleteBox = currentId => {\n    const confirmed = confirm(`Are you sure you want to delete \"${title}\"?`);\n\n    if (confirmed) {\n      const selectedBox = boxes.find(box => box.id === currentId);\n      let newBoxes = boxes;\n\n      if (selectedBox) {\n        if (selectedBox.type === 'list' && selectedBox.cards.length > 0) {\n          const listItems = selectedBox.cards;\n\n          for (let i = 0; i < listItems.length; i++) {\n            const listItemId = listItems[i];\n            newBoxes = update(newBoxes, {\n              $set: newBoxes.filter(box => box.id !== listItemId)\n            });\n          }\n        }\n\n        newBoxes = newBoxes = update(newBoxes, {\n          $set: newBoxes.filter(box => box.id !== currentId)\n        });\n        updateBoxes(newBoxes);\n      }\n    }\n  };\n\n  const onStop = (url, cardId) => {\n    const cardIndex = boxes.findIndex(box => box.id === cardId);\n    const updatedBoxes = update(boxes, {\n      [cardIndex]: {\n        blobUrl: {\n          $set: url\n        }\n      }\n    });\n    updateBoxes(updatedBoxes);\n  };\n\n  if (type === 'list') {\n    // getting list items inside list\n    const listItems = getListItemsInOrder(boxes, cards);\n    return /*#__PURE__*/_jsxDEV(DraggableContainer, _objectSpread(_objectSpread({}, currentBox), {}, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        box: currentBox,\n        deleteBox: deleteBox,\n        fullDisable: fullDisable,\n        boxes: boxes,\n        updateBoxes: updateBoxes,\n        children: /*#__PURE__*/_jsxDEV(List, _objectSpread(_objectSpread({}, currentBox), {}, {\n          setDisableAll: setDisableAll,\n          fullDisable: fullDisable,\n          updateBoxes: updateBoxes,\n          boxes: boxes,\n          listItems: listItems,\n          setPlayList: setPlayList,\n          playingList: playingList,\n          deleteBox: deleteBox,\n          onStop: onStop,\n          socket: socket\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (isListItem) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(DraggableContainer, _objectSpread(_objectSpread({}, currentBox), {}, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      box: currentBox,\n      deleteBox: deleteBox,\n      fullDisable: fullDisable,\n      boxes: boxes,\n      updateBoxes: updateBoxes,\n      children: /*#__PURE__*/_jsxDEV(Recorder, {\n        fullDisable: fullDisable,\n        setDisableAll: setDisableAll,\n        cardId: id,\n        onStop: onStop,\n        blobUrl: blobUrl,\n        socket: socket,\n        title: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n\nexport default InternalBox;","map":{"version":3,"sources":["/Users/mfjvacas/Documents/Dev/GitHub/projects/mapstereo-client/components/DraggableItems.tsx"],"names":["React","useState","update","List","Recorder","Box","DraggableContainer","getListItemsInOrder","boxes","cards","listItems","length","filter","boxItem","listItem","find","cardId","id","listItemsSorted","i","cardObj","$push","InternalBox","setDisableAll","fullDisable","currentBox","updateBoxes","socket","playingList","setPlayList","title","blobUrl","type","isListItem","deleteBox","currentId","confirmed","confirm","selectedBox","box","newBoxes","listItemId","$set","onStop","url","cardIndex","findIndex","updatedBoxes"],"mappings":"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","sourcesContent":["import React, { useState, Dispatch, SetStateAction } from 'react';\nimport update from 'immutability-helper';\nimport List from './List';\nimport Recorder from './Recorder';\nimport Box from './Box';\nimport BoxType from './types/box';\nimport DraggableContainer from './DraggableContainer';\nimport { LOADIPHLPAPI } from 'dns';\n\ninterface Props {\n  boxes: Array<BoxType>;\n  setDisableAll: Dispatch<SetStateAction<boolean>>;\n  fullDisable?: boolean;\n  socket?: SocketIOClient.Socket;\n  updateBoxes?: (boxes: Array<BoxType>) => void;\n\n  // current box\n  currentBox: BoxType;\n}\n\nconst getListItemsInOrder = (boxes, cards) => {\n  const listItems =\n    (boxes &&\n      boxes.length > 0 &&\n      boxes.filter((boxItem) => {\n        const listItem =\n          cards &&\n          cards.length > 0 &&\n          cards.find((cardId) => boxItem.id === cardId);\n\n        if (listItem || listItem === 0) {\n          return true;\n        }\n\n        return false;\n      })) ||\n    [];\n\n  let listItemsSorted = [];\n\n  // sorting listItems to how list has them sorted\n  if (listItems && listItems.length > 0) {\n    for (let i = 0; i < cards.length; i++) {\n      const cardId = cards[i];\n      const cardObj = listItems.find((listItem) => listItem.id === cardId);\n\n      if (cardObj) {\n        listItemsSorted = update(listItemsSorted, {\n          $push: [{ ...cardObj }],\n        });\n      }\n    }\n  }\n\n  return listItemsSorted;\n};\n\nconst InternalBox = ({\n  boxes,\n  setDisableAll,\n  fullDisable,\n  currentBox,\n  updateBoxes,\n  socket,\n}: Props) => {\n  const [playingList, setPlayList] = useState(false);\n  const { title, id, blobUrl, type, cards, isListItem } = currentBox;\n\n  const deleteBox = (currentId) => {\n    const confirmed = confirm(`Are you sure you want to delete \"${title}\"?`);\n    if (confirmed) {\n      const selectedBox = boxes.find((box) => box.id === currentId);\n      let newBoxes = boxes;\n\n      if (selectedBox) {\n        if (selectedBox.type === 'list' && selectedBox.cards.length > 0) {\n          const listItems = selectedBox.cards;\n\n          for (let i = 0; i < listItems.length; i++) {\n            const listItemId = listItems[i];\n\n            newBoxes = update(newBoxes, {\n              $set: newBoxes.filter((box) => box.id !== listItemId),\n            });\n          }\n        }\n\n        newBoxes = newBoxes = update(newBoxes, {\n          $set: newBoxes.filter((box) => box.id !== currentId),\n        });\n        updateBoxes(newBoxes);\n      }\n    }\n  };\n\n  const onStop = (url, cardId) => {\n    const cardIndex = boxes.findIndex((box) => box.id === cardId);\n    const updatedBoxes = update(boxes, {\n      [cardIndex]: {\n        blobUrl: { $set: url },\n      },\n    });\n\n    updateBoxes(updatedBoxes);\n  };\n\n  if (type === 'list') {\n    // getting list items inside list\n    const listItems: Array<any> = getListItemsInOrder(boxes, cards);\n\n    return (\n      <DraggableContainer {...currentBox}>\n        <Box\n          box={currentBox}\n          deleteBox={deleteBox}\n          fullDisable={fullDisable}\n          boxes={boxes}\n          updateBoxes={updateBoxes}\n        >\n          <List\n            {...currentBox}\n            setDisableAll={setDisableAll}\n            fullDisable={fullDisable}\n            updateBoxes={updateBoxes}\n            boxes={boxes}\n            listItems={listItems}\n            setPlayList={setPlayList}\n            playingList={playingList}\n            deleteBox={deleteBox}\n            onStop={onStop}\n            socket={socket}\n          />\n        </Box>\n      </DraggableContainer>\n    );\n  }\n\n  if (isListItem) {\n    return null;\n  }\n\n  return (\n    <DraggableContainer {...currentBox}>\n      <Box\n        box={currentBox}\n        deleteBox={deleteBox}\n        fullDisable={fullDisable}\n        boxes={boxes}\n        updateBoxes={updateBoxes}\n      >\n        <Recorder\n          fullDisable={fullDisable}\n          setDisableAll={setDisableAll}\n          cardId={id}\n          onStop={onStop}\n          blobUrl={blobUrl}\n          socket={socket}\n          title={title}\n        />\n      </Box>\n    </DraggableContainer>\n  );\n};\n\nexport default InternalBox;\n"]},"metadata":{},"sourceType":"module"}