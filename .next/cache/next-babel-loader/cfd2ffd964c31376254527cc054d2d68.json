{"ast":null,"code":"const S3 = require('aws-sdk/clients/s3');\n\nconst multer = require('multer');\n\nconst upload = multer().single('soundBlob');\nconst s3 = new S3({\n  apiVersion: '2006-03-01'\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default (async (req, res) => {\n  if (req.method === 'POST') {\n    return upload(req, res, async err => {\n      try {\n        await s3.upload({\n          Bucket: process.env.AWS_BUCKET,\n          Key: req.file.originalname,\n          Body: Buffer.from(new Uint8Array(req.file.buffer))\n        }, async (err, data) => {\n          if (err) {\n            console.log('error: ', err);\n            res.sendStatus(404);\n          }\n\n          res.send(`https://${process.env.AWS_BUCKET}/${escape(req.file.originalname)}`);\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    });\n  }\n\n  res.end();\n});","map":{"version":3,"sources":["/Users/mfjvacas/Documents/Dev/GitHub/projects/mapstereo-client/pages/api/upload.ts"],"names":["S3","require","multer","upload","single","s3","apiVersion","config","api","bodyParser","req","res","method","err","Bucket","process","env","AWS_BUCKET","Key","file","originalname","Body","Buffer","from","Uint8Array","buffer","data","console","log","sendStatus","send","escape","end"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,oBAAD,CAAlB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,MAAM,GAAGD,MAAM,GAAGE,MAAT,CAAgB,WAAhB,CAAf;AAEA,MAAMC,EAAE,GAAG,IAAIL,EAAJ,CAAO;AAAEM,EAAAA,UAAU,EAAE;AAAd,CAAP,CAAX;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAOP,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,WAAOT,MAAM,CAACO,GAAD,EAAMC,GAAN,EAAW,MAAOE,GAAP,IAAe;AACrC,UAAI;AACF,cAAMR,EAAE,CAACF,MAAH,CACJ;AACEW,UAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,UADtB;AAEEC,UAAAA,GAAG,EAAER,GAAG,CAACS,IAAJ,CAASC,YAFhB;AAGEC,UAAAA,IAAI,EAAEC,MAAM,CAACC,IAAP,CAAY,IAAIC,UAAJ,CAAed,GAAG,CAACS,IAAJ,CAASM,MAAxB,CAAZ;AAHR,SADI,EAMJ,OAAOZ,GAAP,EAAYa,IAAZ,KAAqB;AACnB,cAAIb,GAAJ,EAAS;AACPc,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBf,GAAvB;AACAF,YAAAA,GAAG,CAACkB,UAAJ,CAAe,GAAf;AACD;;AAEDlB,UAAAA,GAAG,CAACmB,IAAJ,CACG,WAAUf,OAAO,CAACC,GAAR,CAAYC,UAAW,IAAGc,MAAM,CACzCrB,GAAG,CAACS,IAAJ,CAASC,YADgC,CAEzC,EAHJ;AAKD,SAjBG,CAAN;AAmBD,OApBD,CAoBE,OAAOP,GAAP,EAAY;AACZc,QAAAA,OAAO,CAACC,GAAR,CAAYf,GAAZ;AACD;AACF,KAxBY,CAAb;AAyBD;;AAEDF,EAAAA,GAAG,CAACqB,GAAJ;AACD,CA9BD","sourcesContent":["const S3 = require('aws-sdk/clients/s3');\nconst multer = require('multer');\nconst upload = multer().single('soundBlob');\n\nconst s3 = new S3({ apiVersion: '2006-03-01' });\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\n\nexport default async (req, res) => {\n  if (req.method === 'POST') {\n    return upload(req, res, async (err) => {\n      try {\n        await s3.upload(\n          {\n            Bucket: process.env.AWS_BUCKET,\n            Key: req.file.originalname,\n            Body: Buffer.from(new Uint8Array(req.file.buffer)),\n          },\n          async (err, data) => {\n            if (err) {\n              console.log('error: ', err);\n              res.sendStatus(404);\n            }\n\n            res.send(\n              `https://${process.env.AWS_BUCKET}/${escape(\n                req.file.originalname\n              )}`\n            );\n          }\n        );\n      } catch (err) {\n        console.log(err);\n      }\n    });\n  }\n\n  res.end();\n};\n"]},"metadata":{},"sourceType":"module"}