{"ast":null,"code":"const S3 = require('aws-sdk/clients/s3');\n\nconst multer = require('multer');\n\nconst upload = multer();\nconst s3 = new S3({\n  apiVersion: '2006-03-01'\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nfunction runMiddleware(req, res, fn) {\n  return new Promise((resolve, reject) => {\n    fn(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n}\n\nexport default (async (req, res) => {\n  if (req.method === 'POST') {\n    const uploadFile = () => {\n      upload.single(\"soundBlob\")(async (req, {}, err) => {\n        try {\n          console.log('req', req);\n          await s3.upload({\n            Bucket: process.env.AWS_BUCKET,\n            Key: req.file.originalname,\n            Body: Buffer.from(new Uint8Array(req.file.buffer))\n          }, async (err, data) => {\n            if (err) {\n              console.log('error: ', err);\n              res.sendStatus(404);\n            }\n\n            res.send(`https://${process.env.AWS_BUCKET}/${escape(req.file.originalname)}`);\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    };\n\n    return uploadFile();\n    res.end();\n  }\n});","map":{"version":3,"sources":["/Users/mfjvacas/Documents/Dev/GitHub/projects/mapstereo-client/pages/api/upload.ts"],"names":["S3","require","multer","upload","s3","apiVersion","config","api","bodyParser","runMiddleware","req","res","fn","Promise","resolve","reject","result","Error","method","uploadFile","single","err","console","log","Bucket","process","env","AWS_BUCKET","Key","file","originalname","Body","Buffer","from","Uint8Array","buffer","data","sendStatus","send","escape","end"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,oBAAD,CAAlB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,MAAM,GAAGD,MAAM,EAArB;AAEA,MAAME,EAAE,GAAG,IAAIJ,EAAJ,CAAO;AAAEK,EAAAA,UAAU,EAAE;AAAd,CAAP,CAAX;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;;AAMP,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,EAAjC,EAAqC;AACnC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCH,IAAAA,EAAE,CAACF,GAAD,EAAMC,GAAN,EAAYK,MAAD,IAAY;AACvB,UAAIA,MAAM,YAAYC,KAAtB,EAA6B;AAC3B,eAAOF,MAAM,CAACC,MAAD,CAAb;AACD;;AAED,aAAOF,OAAO,CAACE,MAAD,CAAd;AACD,KANC,CAAF;AAOD,GARM,CAAP;AASD;;AAED,gBAAe,OAAON,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAID,GAAG,CAACQ,MAAJ,KAAe,MAAnB,EAA2B;AACzB,UAAMC,UAAU,GAAG,MAAM;AACvBhB,MAAAA,MAAM,CAACiB,MAAP,CAAc,WAAd,EAA2B,OAAOV,GAAP,EAAY,EAAZ,EAAgBW,GAAhB,KAAwB;AACjD,YAAI;AAEFC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBb,GAAnB;AAGA,gBAAMN,EAAE,CAACD,MAAH,CACJ;AACEqB,YAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,UADtB;AAEEC,YAAAA,GAAG,EAAElB,GAAG,CAACmB,IAAJ,CAASC,YAFhB;AAGEC,YAAAA,IAAI,EAAEC,MAAM,CAACC,IAAP,CAAY,IAAIC,UAAJ,CAAexB,GAAG,CAACmB,IAAJ,CAASM,MAAxB,CAAZ;AAHR,WADI,EAMJ,OAAOd,GAAP,EAAYe,IAAZ,KAAqB;AACnB,gBAAIf,GAAJ,EAAS;AACPC,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB;AACAV,cAAAA,GAAG,CAAC0B,UAAJ,CAAe,GAAf;AACD;;AAED1B,YAAAA,GAAG,CAAC2B,IAAJ,CACG,WAAUb,OAAO,CAACC,GAAR,CAAYC,UAAW,IAAGY,MAAM,CAAC7B,GAAG,CAACmB,IAAJ,CAASC,YAAV,CAAwB,EADrE;AAGD,WAfG,CAAN;AAkBD,SAvBD,CAuBE,OAAOT,GAAP,EAAY;AACZC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,OA3BD;AA4BD,KA7BD;;AA+BA,WAAOF,UAAU,EAAjB;AAGAR,IAAAA,GAAG,CAAC6B,GAAJ;AACD;AACF,CAtCD","sourcesContent":["const S3 = require('aws-sdk/clients/s3');\nconst multer = require('multer');\nconst upload = multer();\n\nconst s3 = new S3({ apiVersion: '2006-03-01' });\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  }\n}\n\nfunction runMiddleware(req, res, fn) {\n  return new Promise((resolve, reject) => {\n    fn(req, res, (result) => {\n      if (result instanceof Error) {\n        return reject(result)\n      }\n\n      return resolve(result)\n    })\n  })\n}\n\nexport default async (req, res) => {\n  if (req.method === 'POST') {\n    const uploadFile = () => {\n      upload.single(\"soundBlob\")(async (req, {}, err) => {\n        try {\n\n          console.log('req', req);\n          \n  \n          await s3.upload(\n            {\n              Bucket: process.env.AWS_BUCKET,\n              Key: req.file.originalname,\n              Body: Buffer.from(new Uint8Array(req.file.buffer)),\n            },\n            async (err, data) => {\n              if (err) {\n                console.log('error: ', err);\n                res.sendStatus(404);\n              }\n  \n              res.send(\n                `https://${process.env.AWS_BUCKET}/${escape(req.file.originalname)}`\n              );\n            }\n          );\n\n        } catch (err) {\n          console.log(err);\n        }\n      });\n    }\n\n    return uploadFile();\n\n        \n    res.end();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}