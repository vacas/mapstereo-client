{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mfjvacas/Documents/Dev/GitHub/projects/mapstereo-client/components/DroppableBackground.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDrop } from 'react-dnd';\nimport { ItemTypes } from './ItemTypes';\nimport { useCurrentWidth, useCurrentHeight } from './helper';\nimport update from 'immutability-helper';\nconst StyledDroppableBackground = styled.div.withConfig({\n  displayName: \"DroppableBackground__StyledDroppableBackground\",\n  componentId: \"sc-1o35h-0\"\n})([\"width:100%;height:100vh;border:1px solid black;position:relative;\"]);\n\nconst DroppableBackground = ({\n  updateBoxes,\n  boxes,\n  setDisableAll\n}) => {\n  const width = useCurrentWidth();\n  const height = useCurrentHeight();\n  useEffect(() => {\n    for (let i = 0; i < boxes.length; i++) {\n      const {\n        left,\n        top,\n        id\n      } = boxes[i];\n\n      if (left > width) {\n        moveBox(id, width - 50, top);\n      } else if (top > height) {\n        moveBox(id, left, height - 50);\n      }\n    }\n  }, [width, height]);\n  const [, drop] = useDrop({\n    accept: [ItemTypes.BOX, ItemTypes.CARD, ItemTypes.LIST],\n\n    drop(item, monitor) {\n      if (item.type === 'box' || item.type === 'list' || item.type === 'card' && !item.isListItem) {\n        const delta = monitor.getDifferenceFromInitialOffset();\n\n        if (delta) {\n          const left = Math.round(item.left + delta.x);\n          const top = Math.round(item.top + delta.y);\n\n          if (left < width - 50 && left > 0 && top > 0 && top < height - 50) {\n            moveBox(item.id, left, top);\n          }\n        }\n      }\n\n      if (item.type === 'card' && item.isListItem) {\n        const delta = monitor.getClientOffset();\n\n        if (delta && item.ref && item.ref.current) {\n          const boundingRect = item.ref.current.getBoundingClientRect();\n          const xPadding = 32;\n          const yPadding = 31;\n          const approxWidth = Math.floor(boundingRect.width);\n          const approxHeight = Math.floor(boundingRect.height); // top left corner minus half of the width of item\n\n          const left = delta.x - (approxWidth + xPadding) / 2; // top left corner minus half of the height of item\n\n          const top = delta.y - (approxHeight + yPadding) / 2;\n          const cardIndex = boxes.findIndex(box => box.id === item.id);\n          let newBoxes = boxes;\n\n          if (cardIndex !== -1 && boxes[cardIndex].isListItem) {\n            const listIndex = boxes.findIndex(box => {\n              if (box.type === 'list' && box.cards.includes(item.id)) {\n                return true;\n              }\n\n              return false;\n            });\n            newBoxes = update(newBoxes, {\n              [listIndex]: {\n                cards: {\n                  $set: newBoxes[listIndex].cards.filter(cardId => cardId !== item.id)\n                }\n              }\n            });\n          }\n\n          newBoxes = update(newBoxes, {\n            [cardIndex]: {\n              $set: {\n                id: item.id,\n                type: item.type,\n                isListItem: false,\n                top,\n                left,\n                title: item.title,\n                blobUrl: item.blobUrl\n              }\n            }\n          });\n          updateBoxes(newBoxes);\n        }\n\n        return {\n          type: 'droppable_background'\n        };\n      }\n\n      setDisableAll(false);\n    }\n\n  });\n\n  const moveBox = (id, left, top) => {\n    const updatedBoxes = update(boxes, {\n      $set: [...boxes.map(box => {\n        if (box.id === id) {\n          return _objectSpread(_objectSpread({}, box), {}, {\n            left,\n            top\n          });\n        }\n\n        return box;\n      })]\n    });\n    updateBoxes(updatedBoxes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledDroppableBackground, {\n    ref: drop\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 10\n  }, this);\n};\n\nexport default DroppableBackground;","map":{"version":3,"sources":["/Users/mfjvacas/Documents/Dev/GitHub/projects/mapstereo-client/components/DroppableBackground.tsx"],"names":["React","useEffect","styled","useDrop","ItemTypes","useCurrentWidth","useCurrentHeight","update","StyledDroppableBackground","div","DroppableBackground","updateBoxes","boxes","setDisableAll","width","height","i","length","left","top","id","moveBox","drop","accept","BOX","CARD","LIST","item","monitor","type","isListItem","delta","getDifferenceFromInitialOffset","Math","round","x","y","getClientOffset","ref","current","boundingRect","getBoundingClientRect","xPadding","yPadding","approxWidth","floor","approxHeight","cardIndex","findIndex","box","newBoxes","listIndex","cards","includes","$set","filter","cardId","title","blobUrl","updatedBoxes","map"],"mappings":"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","sourcesContent":["import React, { SetStateAction, Dispatch, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDrop } from 'react-dnd';\nimport { ItemTypes } from './ItemTypes';\nimport maxBy from 'lodash/maxBy';\nimport { useCurrentWidth, useCurrentHeight } from './helper';\nimport BoxType from './types/box';\nimport update from 'immutability-helper';\n\nconst StyledDroppableBackground = styled.div`\n  width: 100%;\n  height: 100vh;\n  border: 1px solid black;\n  position: relative;\n`;\n\nconst DroppableBackground = ({\n  updateBoxes,\n  boxes,\n  setDisableAll,\n}: {\n  updateBoxes: (boxes: Array<BoxType>) => void;\n  boxes: Array<BoxType>;\n  setDisableAll: Dispatch<SetStateAction<boolean>>;\n}) => {\n  const width = useCurrentWidth();\n  const height = useCurrentHeight();\n\n  useEffect(() => {\n    for (let i = 0; i < boxes.length; i++) {\n      const { left, top, id } = boxes[i];\n      if (left > width) {\n        moveBox(id, width - 50, top);\n      } else if (top > height) {\n        moveBox(id, left, height - 50);\n      }\n    }\n  }, [width, height]);\n\n  const [, drop] = useDrop({\n    accept: [ItemTypes.BOX, ItemTypes.CARD, ItemTypes.LIST],\n    drop(item: any, monitor) {\n      if (item.type === 'box' || item.type === 'list' || (item.type === 'card' && !item.isListItem)) {\n        const delta = monitor.getDifferenceFromInitialOffset();\n\n        if (delta) {\n          const left = Math.round(item.left + delta.x);\n          const top = Math.round(item.top + delta.y);\n\n          if (left < width - 50 && left > 0 && top > 0 && top < height - 50) {\n            moveBox(item.id, left, top);\n          }\n        }\n      }\n\n      if (item.type === 'card' && item.isListItem) {\n        const delta = monitor.getClientOffset();\n\n        if (delta && item.ref && item.ref.current) {\n          const boundingRect = item.ref.current\n            .getBoundingClientRect();\n          const xPadding = 32;\n          const yPadding = 31;\n\n          const approxWidth = Math.floor(boundingRect.width);\n          const approxHeight = Math.floor(boundingRect.height);\n          // top left corner minus half of the width of item\n          const left = delta.x - (approxWidth + xPadding) / 2;\n          // top left corner minus half of the height of item\n          const top = delta.y - (approxHeight + yPadding) / 2;\n\n          const cardIndex = boxes.findIndex(box => box.id === item.id);\n          let newBoxes = boxes;\n\n          if (cardIndex !== -1 && boxes[cardIndex].isListItem) {\n            const listIndex = boxes.findIndex(box => {\n              if (box.type === 'list' && box.cards.includes(item.id)) {\n                return true;\n              }\n    \n              return false;\n            });\n\n            newBoxes = update(newBoxes, {\n              [listIndex]: {\n                cards: {\n                  $set: newBoxes[listIndex].cards.filter(cardId => cardId !== item.id)\n                }\n              }\n            })\n          }\n          \n          newBoxes = update(newBoxes, {\n            [cardIndex]: {\n              $set: {\n                id: item.id,\n                type: item.type,\n                isListItem: false,\n                top,\n                left,\n                title: item.title,\n                blobUrl: item.blobUrl,\n              }\n            }\n          });\n\n          updateBoxes(newBoxes);\n        }\n\n        return { type: 'droppable_background' };\n      }\n      setDisableAll(false);\n    },\n  });\n\n  const moveBox = (id, left, top) => {\n    const updatedBoxes = update(boxes, {\n      $set: [\n        ...boxes.map((box) => {\n          if (box.id === id) {\n            return { ...box, left, top };\n          }\n\n          return box;\n        }),\n      ],\n    });\n    updateBoxes(updatedBoxes);\n  };\n  return <StyledDroppableBackground ref={drop} />;\n};\n\nexport default DroppableBackground;\n"]},"metadata":{},"sourceType":"module"}