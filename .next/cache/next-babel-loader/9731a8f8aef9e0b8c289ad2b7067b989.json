{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport update from 'immutability-helper';\nimport List from './List';\nimport Recorder from './Recorder';\nimport Box from './Box';\nimport DraggableContainer from './DraggableContainer';\n\nvar getListItemsInOrder = function getListItemsInOrder(boxes, cards) {\n  var listItems = boxes && boxes.length > 0 && boxes.filter(function (boxItem) {\n    var listItem = cards && cards.length > 0 && cards.find(function (cardId) {\n      return boxItem.id === cardId;\n    });\n\n    if (listItem || listItem === 0) {\n      return true;\n    }\n\n    return false;\n  }) || [];\n  var listItemsSorted = []; // sorting listItems to how list has them sorted\n\n  if (listItems && listItems.length > 0) {\n    var _loop = function _loop(i) {\n      var cardId = cards[i];\n      var cardObj = listItems.find(function (listItem) {\n        return listItem.id === cardId;\n      });\n\n      if (cardObj) {\n        listItemsSorted = update(listItemsSorted, {\n          $push: [_objectSpread({}, cardObj)]\n        });\n      }\n    };\n\n    for (var i = 0; i < cards.length; i++) {\n      _loop(i);\n    }\n  }\n\n  return listItemsSorted;\n};\n\nvar InternalBox = function InternalBox(_ref) {\n  var boxes = _ref.boxes,\n      setDisableAll = _ref.setDisableAll,\n      fullDisable = _ref.fullDisable,\n      currentBox = _ref.currentBox,\n      updateBoxes = _ref.updateBoxes,\n      socket = _ref.socket;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      playingList = _useState2[0],\n      setPlayList = _useState2[1];\n\n  var title = currentBox.title,\n      id = currentBox.id,\n      blobUrl = currentBox.blobUrl,\n      type = currentBox.type,\n      cards = currentBox.cards,\n      isListItem = currentBox.isListItem;\n\n  var deleteBox = function deleteBox(currentId) {\n    var confirmed = confirm(\"Are you sure you want to delete \\\"\".concat(title, \"\\\"?\"));\n\n    if (confirmed) {\n      var selectedBox = boxes.find(function (box) {\n        return box.id === currentId;\n      });\n      var newBoxes = boxes;\n\n      if (selectedBox) {\n        if (selectedBox.type === 'list' && selectedBox.cards.length > 0) {\n          var listItems = selectedBox.cards;\n\n          var _loop2 = function _loop2(i) {\n            var listItemId = listItems[i];\n            newBoxes = update(newBoxes, {\n              $set: newBoxes.filter(function (box) {\n                return box.id !== listItemId;\n              })\n            });\n          };\n\n          for (var i = 0; i < listItems.length; i++) {\n            _loop2(i);\n          }\n        }\n\n        newBoxes = newBoxes = update(newBoxes, {\n          $set: newBoxes.filter(function (box) {\n            return box.id !== currentId;\n          })\n        });\n        updateBoxes(newBoxes);\n      }\n    }\n  };\n\n  var onStop = function onStop(url, cardId) {\n    var cardIndex = boxes.findIndex(function (box) {\n      return box.id === cardId;\n    });\n    var updatedBoxes = update(boxes, _defineProperty({}, cardIndex, {\n      blobUrl: {\n        $set: url\n      }\n    }));\n    updateBoxes(updatedBoxes);\n  };\n\n  if (type === 'list') {\n    // getting list items inside list\n    var listItems = getListItemsInOrder(boxes, cards);\n    return /*#__PURE__*/React.createElement(DraggableContainer, currentBox, /*#__PURE__*/React.createElement(Box, {\n      box: currentBox,\n      deleteBox: deleteBox,\n      fullDisable: fullDisable,\n      boxes: boxes,\n      updateBoxes: updateBoxes\n    }, /*#__PURE__*/React.createElement(List, _extends({}, currentBox, {\n      setDisableAll: setDisableAll,\n      fullDisable: fullDisable,\n      updateBoxes: updateBoxes,\n      boxes: boxes,\n      listItems: listItems,\n      setPlayList: setPlayList,\n      playingList: playingList,\n      deleteBox: deleteBox,\n      onStop: onStop,\n      socket: socket\n    }))));\n  }\n\n  if (isListItem) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(DraggableContainer, currentBox, /*#__PURE__*/React.createElement(Box, {\n    box: currentBox,\n    deleteBox: deleteBox,\n    fullDisable: fullDisable,\n    boxes: boxes,\n    updateBoxes: updateBoxes\n  }, /*#__PURE__*/React.createElement(Recorder, {\n    fullDisable: fullDisable,\n    setDisableAll: setDisableAll,\n    cardId: id,\n    onStop: onStop,\n    blobUrl: blobUrl,\n    socket: socket,\n    title: title\n  })));\n};\n\nexport default InternalBox;","map":{"version":3,"sources":["/Users/mfjvacas/Documents/Dev/GitHub/projects/mapstereo-client/components/DraggableItems.tsx"],"names":["React","useState","update","List","Recorder","Box","DraggableContainer","getListItemsInOrder","boxes","cards","listItems","length","filter","boxItem","listItem","find","cardId","id","listItemsSorted","i","cardObj","$push","InternalBox","setDisableAll","fullDisable","currentBox","updateBoxes","socket","playingList","setPlayList","title","blobUrl","type","isListItem","deleteBox","currentId","confirmed","confirm","selectedBox","box","newBoxes","listItemId","$set","onStop","url","cardIndex","findIndex","updatedBoxes"],"mappings":"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","sourcesContent":["import React, { useState, Dispatch, SetStateAction } from 'react';\nimport update from 'immutability-helper';\nimport List from './List';\nimport Recorder from './Recorder';\nimport Box from './Box';\nimport BoxType from './types/box';\nimport DraggableContainer from './DraggableContainer';\nimport { LOADIPHLPAPI } from 'dns';\n\ninterface Props {\n  boxes: Array<BoxType>;\n  setDisableAll: Dispatch<SetStateAction<boolean>>;\n  fullDisable?: boolean;\n  socket?: SocketIOClient.Socket;\n  updateBoxes?: (boxes: Array<BoxType>) => void;\n\n  // current box\n  currentBox: BoxType;\n}\n\nconst getListItemsInOrder = (boxes, cards) => {\n  const listItems =\n    (boxes &&\n      boxes.length > 0 &&\n      boxes.filter((boxItem) => {\n        const listItem =\n          cards &&\n          cards.length > 0 &&\n          cards.find((cardId) => boxItem.id === cardId);\n\n        if (listItem || listItem === 0) {\n          return true;\n        }\n\n        return false;\n      })) ||\n    [];\n\n  let listItemsSorted = [];\n\n  // sorting listItems to how list has them sorted\n  if (listItems && listItems.length > 0) {\n    for (let i = 0; i < cards.length; i++) {\n      const cardId = cards[i];\n      const cardObj = listItems.find((listItem) => listItem.id === cardId);\n\n      if (cardObj) {\n        listItemsSorted = update(listItemsSorted, {\n          $push: [{ ...cardObj }],\n        });\n      }\n    }\n  }\n\n  return listItemsSorted;\n};\n\nconst InternalBox = ({\n  boxes,\n  setDisableAll,\n  fullDisable,\n  currentBox,\n  updateBoxes,\n  socket,\n}: Props) => {\n  const [playingList, setPlayList] = useState(false);\n  const { title, id, blobUrl, type, cards, isListItem } = currentBox;\n\n  const deleteBox = (currentId) => {\n    const confirmed = confirm(`Are you sure you want to delete \"${title}\"?`);\n    if (confirmed) {\n      const selectedBox = boxes.find((box) => box.id === currentId);\n      let newBoxes = boxes;\n\n      if (selectedBox) {\n        if (selectedBox.type === 'list' && selectedBox.cards.length > 0) {\n          const listItems = selectedBox.cards;\n\n          for (let i = 0; i < listItems.length; i++) {\n            const listItemId = listItems[i];\n\n            newBoxes = update(newBoxes, {\n              $set: newBoxes.filter((box) => box.id !== listItemId),\n            });\n          }\n        }\n\n        newBoxes = newBoxes = update(newBoxes, {\n          $set: newBoxes.filter((box) => box.id !== currentId),\n        });\n        updateBoxes(newBoxes);\n      }\n    }\n  };\n\n  const onStop = (url, cardId) => {\n    const cardIndex = boxes.findIndex((box) => box.id === cardId);\n    const updatedBoxes = update(boxes, {\n      [cardIndex]: {\n        blobUrl: { $set: url },\n      },\n    });\n\n    updateBoxes(updatedBoxes);\n  };\n\n  if (type === 'list') {\n    // getting list items inside list\n    const listItems: Array<any> = getListItemsInOrder(boxes, cards);\n\n    return (\n      <DraggableContainer {...currentBox}>\n        <Box\n          box={currentBox}\n          deleteBox={deleteBox}\n          fullDisable={fullDisable}\n          boxes={boxes}\n          updateBoxes={updateBoxes}\n        >\n          <List\n            {...currentBox}\n            setDisableAll={setDisableAll}\n            fullDisable={fullDisable}\n            updateBoxes={updateBoxes}\n            boxes={boxes}\n            listItems={listItems}\n            setPlayList={setPlayList}\n            playingList={playingList}\n            deleteBox={deleteBox}\n            onStop={onStop}\n            socket={socket}\n          />\n        </Box>\n      </DraggableContainer>\n    );\n  }\n\n  if (isListItem) {\n    return null;\n  }\n\n  return (\n    <DraggableContainer {...currentBox}>\n      <Box\n        box={currentBox}\n        deleteBox={deleteBox}\n        fullDisable={fullDisable}\n        boxes={boxes}\n        updateBoxes={updateBoxes}\n      >\n        <Recorder\n          fullDisable={fullDisable}\n          setDisableAll={setDisableAll}\n          cardId={id}\n          onStop={onStop}\n          blobUrl={blobUrl}\n          socket={socket}\n          title={title}\n        />\n      </Box>\n    </DraggableContainer>\n  );\n};\n\nexport default InternalBox;\n"]},"metadata":{},"sourceType":"module"}