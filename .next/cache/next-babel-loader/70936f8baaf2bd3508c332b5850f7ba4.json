{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mfjvacas/Documents/Dev/GitHub/projects/mapstereo-client/components/Recorder.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport Loading from './Loading';\nimport RecorderIcon from './RecorderIcon';\nimport { getRecorderId } from './helper';\n/*\n  Adaptation of react-media-recorder: https://github.com/0x006F/react-media-recorder/blob/master/src/index.ts\n*/\n\nvar RecorderErrors;\n\n(function (RecorderErrors) {\n  RecorderErrors[\"AbortError\"] = \"media_aborted\";\n  RecorderErrors[\"NotAllowedError\"] = \"permission_denied\";\n  RecorderErrors[\"NotFoundError\"] = \"no_specified_media_found\";\n  RecorderErrors[\"NotReadableError\"] = \"media_in_use\";\n  RecorderErrors[\"OverconstrainedError\"] = \"invalid_media_constraints\";\n  RecorderErrors[\"TypeError\"] = \"no_constraints\";\n  RecorderErrors[\"NONE\"] = \"\";\n  RecorderErrors[\"NO_RECORDER\"] = \"recorder_error\";\n})(RecorderErrors || (RecorderErrors = {}));\n\nconst StyledAudioWrapper = styled.section.withConfig({\n  displayName: \"Recorder__StyledAudioWrapper\",\n  componentId: \"sc-120i7n2-0\"\n})([\"audio{&.disabled{&::-webkit-media-controls-play-button{pointer-events:none;opacity:0.5;}}&:focus{outline:none;}}& .recording{background:red;}\"]);\n_c = StyledAudioWrapper;\n\nconst Recorder = ({\n  onStop,\n  blobUrl,\n  listId,\n  cardId,\n  fullDisable,\n  setDisableAll,\n  playList,\n  socket,\n  title\n}) => {\n  _s();\n\n  const {\n    0: hovering,\n    1: setHovering\n  } = useState(false);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: loop,\n    1: setLoop\n  } = useState(false);\n  const mediaRecorderOptions = null; // for individual recorder components\n\n  const {\n    0: disabledRecord,\n    1: setDisableRecord\n  } = useState(false);\n  const {\n    0: disabledStop,\n    1: setDisableStop\n  } = useState(true);\n  const mediaRecorder = useRef(null);\n  const mediaChunks = useRef([]);\n  const mediaStream = useRef(null);\n  const {\n    0: status,\n    1: setStatus\n  } = useState('idle');\n  const {\n    0: mediaBlobUrl,\n    1: setMediaBlobUrl\n  } = useState(blobUrl);\n  const {\n    0: error,\n    1: setError\n  } = useState('NONE'); // set up basic variables for app\n\n  const getMediaStream = useCallback(async () => {\n    if (status !== 'acquiring_media') {\n      setStatus('acquiring_media');\n    }\n\n    const requiredMedia = {\n      audio: true\n    };\n\n    try {\n      const stream = await window.navigator.mediaDevices.getUserMedia(requiredMedia);\n      mediaStream.current = stream;\n\n      if (status !== 'idle') {\n        setStatus('idle');\n      }\n    } catch (e) {\n      if (error !== e.name) {\n        setError(e.name);\n      }\n\n      if (status !== 'idle') {\n        setStatus('idle');\n      }\n    }\n  }, []);\n  useEffect(() => {\n    if (!window.MediaRecorder) {\n      throw new Error('Unsupported Browser');\n    }\n\n    if (mediaRecorderOptions && mediaRecorderOptions.mimeType) {\n      if (!MediaRecorder.isTypeSupported(mediaRecorderOptions.mimeType)) {\n        console.error(`The specified MIME type you supplied for MediaRecorder doesn't support this browser`);\n      }\n    }\n\n    async function loadStream() {\n      await getMediaStream();\n    }\n\n    if (!mediaStream.current) {\n      loadStream();\n    }\n  }, [getMediaStream, mediaRecorderOptions]);\n  useEffect(() => {\n    console.log(status);\n  }, [status]);\n  useEffect(() => {\n    if (blobUrl && mediaBlobUrl !== blobUrl) {\n      setMediaBlobUrl(blobUrl);\n    }\n  }, [blobUrl]);\n\n  const startRecording = async () => {\n    setDisableAll(true);\n    socket.emit('recording', {\n      recording: true\n    });\n    setDisableRecord(true);\n    setDisableStop(false);\n    setError('NONE');\n\n    if (!mediaStream.current) {\n      await getMediaStream();\n    }\n\n    if (mediaStream.current) {\n      mediaRecorder.current = new MediaRecorder(mediaStream.current);\n      mediaRecorder.current.ondataavailable = onRecordingActive;\n      mediaRecorder.current.onstop = await onRecordingStop;\n\n      mediaRecorder.current.onerror = () => {\n        setError('NO_RECORDER');\n        setStatus('idle');\n      };\n\n      mediaRecorder.current.start();\n      setStatus('recording');\n    }\n  };\n\n  const onRecordingActive = ({\n    data\n  }) => {\n    mediaChunks.current.push(data);\n  };\n\n  const onRecordingStop = async () => {\n    const blobProperty = {\n      type: 'audio/wav'\n    };\n    const blob = new Blob(mediaChunks.current, blobProperty);\n    const data = new FormData();\n    data.append('soundBlob', blob, `${title}.wav`);\n    const result = await axios.post('/upload', data, {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    });\n    const url = result && result.data || '';\n    setMediaBlobUrl(url);\n    onStop(url, cardId);\n    setStatus('stopped');\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorder.current) {\n      setDisableAll(false);\n      socket.emit('recording', {\n        recording: false\n      });\n      setDisableRecord(false);\n      setDisableStop(true);\n      setStatus('stopping');\n      mediaRecorder.current.stop();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(StyledAudioWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 5\n    },\n    __self: this\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"buttons\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    },\n    __self: this\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    disabled: disabledRecord || fullDisable || playList,\n    className: cn('record', {\n      recording: disabledRecord\n    }),\n    onClick: startRecording,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    },\n    __self: this\n  }, \"Record\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"stop\",\n    disabled: disabledStop,\n    onClick: stopRecording,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    },\n    __self: this\n  }, \"Stop\"), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"loop\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    },\n    __self: this\n  }, \"Loop\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    onClick: () => setLoop(!loop),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    },\n    __self: this\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    },\n    __self: this\n  }, mediaBlobUrl ? /*#__PURE__*/React.createElement(\"audio\", {\n    id: getRecorderId(listId, cardId, blobUrl),\n    className: cn({\n      disabled: fullDisable\n    }),\n    muted: fullDisable,\n    src: mediaBlobUrl,\n    controls: true,\n    loop: loop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    },\n    __self: this\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    onDrop: async e => {\n      e.preventDefault();\n\n      if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n        setLoading(true);\n        setDisableAll(true);\n        const data = new FormData();\n        data.append('soundBlob', e.dataTransfer.files[0], e.dataTransfer.files[0].name);\n        const result = await axios.post('/upload', data, {\n          headers: {\n            'content-type': 'multipart/form-data'\n          }\n        });\n        const url = result && result.data || '';\n\n        if (url) {\n          setMediaBlobUrl(url);\n          onStop(url, cardId);\n        }\n\n        setLoading(false);\n        setDisableAll(false);\n      }\n    },\n    onDragOver: e => {\n      e.preventDefault();\n\n      if (!hovering && e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n        setHovering(true);\n      }\n    },\n    onDragLeave: e => {\n      e.preventDefault();\n\n      if (hovering) {\n        setHovering(false);\n      }\n    },\n    className: cn(\"dropzone\", {\n      hovering\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    },\n    __self: this\n  }, (loading || status === 'recording') && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dropzoneStatus\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 17\n    },\n    __self: this\n  }, status === 'recording' && /*#__PURE__*/React.createElement(RecorderIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 47\n    },\n    __self: this\n  }), loading && /*#__PURE__*/React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 32\n    },\n    __self: this\n  })), \"Drop files here\")), error && error !== 'NONE' && /*#__PURE__*/React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 39\n    },\n    __self: this\n  }, error)));\n};\n\n_s(Recorder, \"c8a87jKn5UDIErZeb/0jOv3LZSw=\");\n\n_c2 = Recorder;\nexport default Recorder;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledAudioWrapper\");\n$RefreshReg$(_c2, \"Recorder\");","map":{"version":3,"sources":["/Users/mfjvacas/Documents/Dev/GitHub/projects/mapstereo-client/components/Recorder.tsx"],"names":["React","useCallback","useEffect","useRef","useState","cn","styled","axios","Loading","RecorderIcon","getRecorderId","RecorderErrors","StyledAudioWrapper","section","Recorder","onStop","blobUrl","listId","cardId","fullDisable","setDisableAll","playList","socket","title","hovering","setHovering","loading","setLoading","loop","setLoop","mediaRecorderOptions","disabledRecord","setDisableRecord","disabledStop","setDisableStop","mediaRecorder","mediaChunks","mediaStream","status","setStatus","mediaBlobUrl","setMediaBlobUrl","error","setError","getMediaStream","requiredMedia","audio","stream","window","navigator","mediaDevices","getUserMedia","current","e","name","MediaRecorder","Error","mimeType","isTypeSupported","console","loadStream","log","startRecording","emit","recording","ondataavailable","onRecordingActive","onstop","onRecordingStop","onerror","start","data","push","blobProperty","type","blob","Blob","FormData","append","result","post","headers","url","stopRecording","stop","disabled","preventDefault","dataTransfer","files","length","items"],"mappings":";;;;;AAAA,OAAOA,KAAP,IACEC,WADF,EAEEC,SAFF,EAGEC,MAHF,EAIEC,QAJF,QAOO,OAPP;AAQA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,aAAT,QAA8B,UAA9B;AAEA;;;;IAmBKC,c;;WAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;;AAuBL,MAAMC,kBAAkB,GAAGN,MAAM,CAACO,OAAV;AAAA;AAAA;AAAA,qJAAxB;KAAMD,kB;;AAkBN,MAAME,QAAQ,GAAG,CAAC;AAChBC,EAAAA,MADgB;AAEhBC,EAAAA,OAFgB;AAGhBC,EAAAA,MAHgB;AAIhBC,EAAAA,MAJgB;AAKhBC,EAAAA,WALgB;AAMhBC,EAAAA,aANgB;AAOhBC,EAAAA,QAPgB;AAQhBC,EAAAA,MARgB;AAShBC,EAAAA;AATgB,CAAD,KAUJ;AAAA;;AACX,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BrB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACsB,OAAD;AAAA,OAAUC;AAAV,MAAwBvB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAACwB,IAAD;AAAA,OAAOC;AAAP,MAAkBzB,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM0B,oBAAoB,GAAG,IAA7B,CAJW,CAKX;;AACA,QAAM;AAAA,OAACC,cAAD;AAAA,OAAiBC;AAAjB,MAAqC5B,QAAQ,CAAC,KAAD,CAAnD;AACA,QAAM;AAAA,OAAC6B,YAAD;AAAA,OAAeC;AAAf,MAAiC9B,QAAQ,CAAC,IAAD,CAA/C;AACA,QAAM+B,aAAa,GAAGhC,MAAM,CAAuB,IAAvB,CAA5B;AACA,QAAMiC,WAAW,GAAGjC,MAAM,CAAS,EAAT,CAA1B;AACA,QAAMkC,WAAW,GAAGlC,MAAM,CAAqB,IAArB,CAA1B;AACA,QAAM;AAAA,OAACmC,MAAD;AAAA,OAASC;AAAT,MAAsBnC,QAAQ,CAAiB,MAAjB,CAApC;AAEA,QAAM;AAAA,OAACoC,YAAD;AAAA,OAAeC;AAAf,MAAkCrC,QAAQ,CAAgBY,OAAhB,CAAhD;AACA,QAAM;AAAA,OAAC0B,KAAD;AAAA,OAAQC;AAAR,MAAoBvC,QAAQ,CAA8B,MAA9B,CAAlC,CAdW,CAgBX;;AACA,QAAMwC,cAAc,GAAG3C,WAAW,CAAC,YAAY;AAC7C,QAAIqC,MAAM,KAAK,iBAAf,EAAkC;AAChCC,MAAAA,SAAS,CAAC,iBAAD,CAAT;AACD;;AACD,UAAMM,aAAqC,GAAG;AAC5CC,MAAAA,KAAK,EAAE;AADqC,KAA9C;;AAGA,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMC,MAAM,CAACC,SAAP,CAAiBC,YAAjB,CAA8BC,YAA9B,CACnBN,aADmB,CAArB;AAGAR,MAAAA,WAAW,CAACe,OAAZ,GAAsBL,MAAtB;;AACA,UAAIT,MAAM,KAAK,MAAf,EAAuB;AACrBC,QAAAA,SAAS,CAAC,MAAD,CAAT;AACD;AACF,KARD,CAQE,OAAOc,CAAP,EAAU;AACV,UAAIX,KAAK,KAAKW,CAAC,CAACC,IAAhB,EAAsB;AACpBX,QAAAA,QAAQ,CAACU,CAAC,CAACC,IAAH,CAAR;AACD;;AACD,UAAIhB,MAAM,KAAK,MAAf,EAAuB;AACrBC,QAAAA,SAAS,CAAC,MAAD,CAAT;AACD;AACF;AACF,GAvBiC,EAuB/B,EAvB+B,CAAlC;AAyBArC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC8C,MAAM,CAACO,aAAZ,EAA2B;AACzB,YAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED,QAAI1B,oBAAoB,IAAIA,oBAAoB,CAAC2B,QAAjD,EAA2D;AACzD,UAAI,CAACF,aAAa,CAACG,eAAd,CAA8B5B,oBAAoB,CAAC2B,QAAnD,CAAL,EAAmE;AACjEE,QAAAA,OAAO,CAACjB,KAAR,CACG,qFADH;AAGD;AACF;;AAED,mBAAekB,UAAf,GAA4B;AAC1B,YAAMhB,cAAc,EAApB;AACD;;AAED,QAAI,CAACP,WAAW,CAACe,OAAjB,EAA0B;AACxBQ,MAAAA,UAAU;AACX;AACF,GApBQ,EAoBN,CAAChB,cAAD,EAAiBd,oBAAjB,CApBM,CAAT;AAsBA5B,EAAAA,SAAS,CAAC,MAAM;AACdyD,IAAAA,OAAO,CAACE,GAAR,CAAYvB,MAAZ;AACD,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT;AAIApC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,OAAO,IAAIwB,YAAY,KAAKxB,OAAhC,EAAyC;AACvCyB,MAAAA,eAAe,CAACzB,OAAD,CAAf;AACD;AACF,GAJQ,EAIN,CAACA,OAAD,CAJM,CAAT;;AAMA,QAAM8C,cAAc,GAAG,YAAY;AACjC1C,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,IAAAA,MAAM,CAACyC,IAAP,CAAY,WAAZ,EAAyB;AACvBC,MAAAA,SAAS,EAAE;AADY,KAAzB;AAGAhC,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAE,IAAAA,cAAc,CAAC,KAAD,CAAd;AACAS,IAAAA,QAAQ,CAAC,MAAD,CAAR;;AACA,QAAI,CAACN,WAAW,CAACe,OAAjB,EAA0B;AACxB,YAAMR,cAAc,EAApB;AACD;;AAED,QAAIP,WAAW,CAACe,OAAhB,EAAyB;AACvBjB,MAAAA,aAAa,CAACiB,OAAd,GAAwB,IAAIG,aAAJ,CAAkBlB,WAAW,CAACe,OAA9B,CAAxB;AAEAjB,MAAAA,aAAa,CAACiB,OAAd,CAAsBa,eAAtB,GAAwCC,iBAAxC;AAEA/B,MAAAA,aAAa,CAACiB,OAAd,CAAsBe,MAAtB,GAA+B,MAAMC,eAArC;;AACAjC,MAAAA,aAAa,CAACiB,OAAd,CAAsBiB,OAAtB,GAAgC,MAAM;AACpC1B,QAAAA,QAAQ,CAAC,aAAD,CAAR;AACAJ,QAAAA,SAAS,CAAC,MAAD,CAAT;AACD,OAHD;;AAIAJ,MAAAA,aAAa,CAACiB,OAAd,CAAsBkB,KAAtB;AACA/B,MAAAA,SAAS,CAAC,WAAD,CAAT;AACD;AACF,GAzBD;;AA2BA,QAAM2B,iBAAiB,GAAG,CAAC;AAAEK,IAAAA;AAAF,GAAD,KAAyB;AACjDnC,IAAAA,WAAW,CAACgB,OAAZ,CAAoBoB,IAApB,CAAyBD,IAAzB;AACD,GAFD;;AAIA,QAAMH,eAAe,GAAG,YAAY;AAClC,UAAMK,YAA6B,GAAG;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAtC;AACA,UAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASxC,WAAW,CAACgB,OAArB,EAA8BqB,YAA9B,CAAb;AAEA,UAAMF,IAAI,GAAG,IAAIM,QAAJ,EAAb;AACAN,IAAAA,IAAI,CAACO,MAAL,CAAY,WAAZ,EAAyBH,IAAzB,EAAgC,GAAEpD,KAAM,MAAxC;AAEA,UAAMwD,MAAM,GAAG,MAAMxE,KAAK,CAACyE,IAAN,CAAW,SAAX,EAAsBT,IAAtB,EAA4B;AAC/CU,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AADsC,KAA5B,CAArB;AAIA,UAAMC,GAAG,GAAIH,MAAM,IAAIA,MAAM,CAACR,IAAlB,IAA2B,EAAvC;AAEA9B,IAAAA,eAAe,CAACyC,GAAD,CAAf;AACAnE,IAAAA,MAAM,CAACmE,GAAD,EAAMhE,MAAN,CAAN;AACAqB,IAAAA,SAAS,CAAC,SAAD,CAAT;AACD,GAhBD;;AAkBA,QAAM4C,aAAa,GAAG,MAAM;AAC1B,QAAIhD,aAAa,CAACiB,OAAlB,EAA2B;AACzBhC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,MAAAA,MAAM,CAACyC,IAAP,CAAY,WAAZ,EAAyB;AACvBC,QAAAA,SAAS,EAAE;AADY,OAAzB;AAGAhC,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAE,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAK,MAAAA,SAAS,CAAC,UAAD,CAAT;AACAJ,MAAAA,aAAa,CAACiB,OAAd,CAAsBgC,IAAtB;AACD;AACF,GAXD;;AAaA,sBACE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,QAAQ,EAAErD,cAAc,IAAIZ,WAAlB,IAAiCE,QAD7C;AAEE,IAAA,SAAS,EAAEhB,EAAE,CAAC,QAAD,EAAW;AACtB2D,MAAAA,SAAS,EAAEjC;AADW,KAAX,CAFf;AAKE,IAAA,OAAO,EAAE+B,cALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAUE;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,QAAQ,EAAE7B,YAFZ;AAGE,IAAA,OAAO,EAAEkD,aAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,eAiBE;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF,eAkBE;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,OAAO,EAAE,MAAMtD,OAAO,CAAC,CAACD,IAAF,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlBF,eAmBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGY,YAAY,gBACX;AACE,IAAA,EAAE,EAAE9B,aAAa,CAACO,MAAD,EAASC,MAAT,EAAiBF,OAAjB,CADnB;AAEE,IAAA,SAAS,EAAEX,EAAE,CAAC;AACZgF,MAAAA,QAAQ,EAAElE;AADE,KAAD,CAFf;AAKE,IAAA,KAAK,EAAEA,WALT;AAME,IAAA,GAAG,EAAEqB,YANP;AAOE,IAAA,QAAQ,MAPV;AAQE,IAAA,IAAI,EAAEZ,IARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADW,gBAYX;AACE,IAAA,MAAM,EAAE,MAAOyB,CAAP,IAAa;AACnBA,MAAAA,CAAC,CAACiC,cAAF;;AACA,UAAIjC,CAAC,CAACkC,YAAF,CAAeC,KAAf,IAAwBnC,CAAC,CAACkC,YAAF,CAAeC,KAAf,CAAqBC,MAArB,GAA8B,CAA1D,EAA6D;AAC3D9D,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAP,QAAAA,aAAa,CAAC,IAAD,CAAb;AACA,cAAMmD,IAAI,GAAG,IAAIM,QAAJ,EAAb;AACAN,QAAAA,IAAI,CAACO,MAAL,CACE,WADF,EAEEzB,CAAC,CAACkC,YAAF,CAAeC,KAAf,CAAqB,CAArB,CAFF,EAGEnC,CAAC,CAACkC,YAAF,CAAeC,KAAf,CAAqB,CAArB,EAAwBlC,IAH1B;AAMA,cAAMyB,MAAM,GAAG,MAAMxE,KAAK,CAACyE,IAAN,CAAW,SAAX,EAAsBT,IAAtB,EAA4B;AAC/CU,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB;AADsC,SAA5B,CAArB;AAIA,cAAMC,GAAG,GAAIH,MAAM,IAAIA,MAAM,CAACR,IAAlB,IAA2B,EAAvC;;AAEA,YAAIW,GAAJ,EAAS;AACPzC,UAAAA,eAAe,CAACyC,GAAD,CAAf;AACAnE,UAAAA,MAAM,CAACmE,GAAD,EAAMhE,MAAN,CAAN;AACD;;AAEDS,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAP,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,KA3BH;AA4BE,IAAA,UAAU,EAAGiC,CAAD,IAAO;AACjBA,MAAAA,CAAC,CAACiC,cAAF;;AACA,UAAI,CAAC9D,QAAD,IAAa6B,CAAC,CAACkC,YAAF,CAAeG,KAA5B,IAAqCrC,CAAC,CAACkC,YAAF,CAAeG,KAAf,CAAqBD,MAArB,GAA8B,CAAvE,EAA0E;AACxEhE,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,KAjCH;AAkCE,IAAA,WAAW,EAAG4B,CAAD,IAAO;AAClBA,MAAAA,CAAC,CAACiC,cAAF;;AACA,UAAI9D,QAAJ,EAAc;AACZC,QAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,KAvCH;AAwCE,IAAA,SAAS,EAAEpB,EAAE,CAAC,UAAD,EAAa;AACxBmB,MAAAA;AADwB,KAAb,CAxCf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA4CG,CAACE,OAAO,IAAIY,MAAM,KAAK,WAAvB,kBACC;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIA,MAAM,KAAK,WAAX,iBAA0B,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD9B,EAEIZ,OAAO,iBAAI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFf,CA7CJ,oBAbJ,CAnBF,EAsFGgB,KAAK,IAAIA,KAAK,KAAK,MAAnB,iBAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,KAAP,CAtFhC,CAFF,CADF;AA6FD,CA/OD;;GAAM5B,Q;;MAAAA,Q;AAiPN,eAAeA,QAAf","sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  Dispatch,\n  SetStateAction,\n} from 'react';\nimport cn from 'classnames';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport Loading from './Loading';\nimport RecorderIcon from './RecorderIcon';\nimport { getRecorderId } from './helper';\n\n/*\n  Adaptation of react-media-recorder: https://github.com/0x006F/react-media-recorder/blob/master/src/index.ts\n*/\n\ntype StatusMessages =\n  | 'media_aborted'\n  | 'permission_denied'\n  | 'no_specified_media_found'\n  | 'media_in_use'\n  | 'invalid_media_constraints'\n  | 'no_constraints'\n  | 'recorder_error'\n  | 'idle'\n  | 'acquiring_media'\n  | 'delayed_start'\n  | 'recording'\n  | 'stopping'\n  | 'stopped';\n\nenum RecorderErrors {\n  AbortError = 'media_aborted',\n  NotAllowedError = 'permission_denied',\n  NotFoundError = 'no_specified_media_found',\n  NotReadableError = 'media_in_use',\n  OverconstrainedError = 'invalid_media_constraints',\n  TypeError = 'no_constraints',\n  NONE = '',\n  NO_RECORDER = 'recorder_error',\n}\n\ninterface Props {\n  onStop: (url: string, cardId: number) => void;\n  blobUrl: string;\n  listId?: number;\n  cardId?: number;\n  setDisableAll?: Dispatch<SetStateAction<boolean>>;\n  fullDisable?: boolean;\n  playList?: boolean;\n  socket?: SocketIOClient.Socket;\n  title?: string;\n}\n\nconst StyledAudioWrapper = styled.section`\n  audio {\n    &.disabled {\n      &::-webkit-media-controls-play-button {\n        pointer-events: none;\n        opacity: 0.5;\n      }\n    }\n    &:focus {\n      outline: none;\n    }\n  }\n\n  & .recording {\n    background: red;\n  }\n`;\n\nconst Recorder = ({\n  onStop,\n  blobUrl,\n  listId,\n  cardId,\n  fullDisable,\n  setDisableAll,\n  playList,\n  socket,\n  title,\n}: Props) => {\n  const [hovering, setHovering] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [loop, setLoop] = useState(false);\n  const mediaRecorderOptions = null;\n  // for individual recorder components\n  const [disabledRecord, setDisableRecord] = useState(false);\n  const [disabledStop, setDisableStop] = useState(true);\n  const mediaRecorder = useRef<MediaRecorder | null>(null);\n  const mediaChunks = useRef<Blob[]>([]);\n  const mediaStream = useRef<MediaStream | null>(null);\n  const [status, setStatus] = useState<StatusMessages>('idle');\n\n  const [mediaBlobUrl, setMediaBlobUrl] = useState<string | null>(blobUrl);\n  const [error, setError] = useState<keyof typeof RecorderErrors>('NONE');\n\n  // set up basic variables for app\n  const getMediaStream = useCallback(async () => {\n    if (status !== 'acquiring_media') {\n      setStatus('acquiring_media');\n    }\n    const requiredMedia: MediaStreamConstraints = {\n      audio: true,\n    };\n    try {\n      const stream = await window.navigator.mediaDevices.getUserMedia(\n        requiredMedia\n      );\n      mediaStream.current = stream;\n      if (status !== 'idle') {\n        setStatus('idle');\n      }\n    } catch (e) {\n      if (error !== e.name) {\n        setError(e.name);\n      }\n      if (status !== 'idle') {\n        setStatus('idle');\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!window.MediaRecorder) {\n      throw new Error('Unsupported Browser');\n    }\n\n    if (mediaRecorderOptions && mediaRecorderOptions.mimeType) {\n      if (!MediaRecorder.isTypeSupported(mediaRecorderOptions.mimeType)) {\n        console.error(\n          `The specified MIME type you supplied for MediaRecorder doesn't support this browser`\n        );\n      }\n    }\n\n    async function loadStream() {\n      await getMediaStream();\n    }\n\n    if (!mediaStream.current) {\n      loadStream();\n    }\n  }, [getMediaStream, mediaRecorderOptions]);\n\n  useEffect(() => {\n    console.log(status);\n  }, [status]);\n\n  useEffect(() => {\n    if (blobUrl && mediaBlobUrl !== blobUrl) {\n      setMediaBlobUrl(blobUrl);\n    }\n  }, [blobUrl]);\n\n  const startRecording = async () => {\n    setDisableAll(true);\n    socket.emit('recording', {\n      recording: true,\n    });\n    setDisableRecord(true);\n    setDisableStop(false);\n    setError('NONE');\n    if (!mediaStream.current) {\n      await getMediaStream();\n    }\n\n    if (mediaStream.current) {\n      mediaRecorder.current = new MediaRecorder(mediaStream.current);\n\n      mediaRecorder.current.ondataavailable = onRecordingActive;\n\n      mediaRecorder.current.onstop = await onRecordingStop;\n      mediaRecorder.current.onerror = () => {\n        setError('NO_RECORDER');\n        setStatus('idle');\n      };\n      mediaRecorder.current.start();\n      setStatus('recording');\n    }\n  };\n\n  const onRecordingActive = ({ data }: BlobEvent) => {\n    mediaChunks.current.push(data);\n  };\n\n  const onRecordingStop = async () => {\n    const blobProperty: BlobPropertyBag = { type: 'audio/wav' };\n    const blob = new Blob(mediaChunks.current, blobProperty);\n\n    const data = new FormData();\n    data.append('soundBlob', blob, `${title}.wav`);\n\n    const result = await axios.post('/upload', data, {\n      headers: { 'content-type': 'multipart/form-data' },\n    });\n\n    const url = (result && result.data) || '';\n\n    setMediaBlobUrl(url);\n    onStop(url, cardId);\n    setStatus('stopped');\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorder.current) {\n      setDisableAll(false);\n      socket.emit('recording', {\n        recording: false,\n      });\n      setDisableRecord(false);\n      setDisableStop(true);\n      setStatus('stopping');\n      mediaRecorder.current.stop();\n    }\n  };\n\n  return (\n    <StyledAudioWrapper>\n      {/* <canvas className=\"visualizer\" height=\"60px\"></canvas> */}\n      <div id=\"buttons\">\n        <button\n          disabled={disabledRecord || fullDisable || playList}\n          className={cn('record', {\n            recording: disabledRecord,\n          })}\n          onClick={startRecording}\n        >\n          Record\n        </button>\n        <button\n          className=\"stop\"\n          disabled={disabledStop}\n          onClick={stopRecording}\n        >\n          Stop\n        </button>\n        <label htmlFor=\"loop\">Loop</label>\n        <input type=\"checkbox\" onClick={() => setLoop(!loop)} />\n        <div>\n          {mediaBlobUrl ? (\n            <audio\n              id={getRecorderId(listId, cardId, blobUrl)}\n              className={cn({\n                disabled: fullDisable,\n              })}\n              muted={fullDisable}\n              src={mediaBlobUrl}\n              controls\n              loop={loop}\n            />\n          ) : (\n            <div\n              onDrop={async (e) => {\n                e.preventDefault();\n                if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n                  setLoading(true);\n                  setDisableAll(true);\n                  const data = new FormData();\n                  data.append(\n                    'soundBlob',\n                    e.dataTransfer.files[0],\n                    e.dataTransfer.files[0].name\n                  );\n\n                  const result = await axios.post('/upload', data, {\n                    headers: { 'content-type': 'multipart/form-data' },\n                  });\n\n                  const url = (result && result.data) || '';\n\n                  if (url) {\n                    setMediaBlobUrl(url);\n                    onStop(url, cardId);\n                  }\n\n                  setLoading(false);\n                  setDisableAll(false);\n                }\n              }}\n              onDragOver={(e) => {\n                e.preventDefault();\n                if (!hovering && e.dataTransfer.items && e.dataTransfer.items.length > 0) {\n                  setHovering(true);\n                }\n              }}\n              onDragLeave={(e) => {\n                e.preventDefault();\n                if (hovering) {\n                  setHovering(false);\n                }\n              }}\n              className={cn(\"dropzone\", {\n                hovering\n              })}\n            >\n              {(loading || status === 'recording' ) && (\n                <div className=\"dropzoneStatus\">\n                  { status === 'recording' && <RecorderIcon/>}\n                  { loading && <Loading />}\n                </div>\n              )}\n              Drop files here\n            </div>\n          )}\n        </div>\n        {error && error !== 'NONE' && <span>{error}</span>}\n      </div>\n    </StyledAudioWrapper>\n  );\n};\n\nexport default Recorder;\n"]},"metadata":{},"sourceType":"module"}