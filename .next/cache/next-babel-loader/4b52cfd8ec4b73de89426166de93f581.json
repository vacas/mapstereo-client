{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/mfjvacas/Documents/Dev/GitHub/projects/mapstereo-client/components/ListItem.tsx\";\nimport React, { useRef } from 'react';\nimport cn from 'classnames';\nimport { useDrag, useDrop } from 'react-dnd';\nimport styled from 'styled-components';\nimport { ItemTypes } from './ItemTypes';\nconst StyledCard = styled.div.withConfig({\n  displayName: \"ListItem__StyledCard\",\n  componentId: \"sc-1efvvpc-0\"\n})([\"position:relative;margin-bottom:0.5rem;cursor:move;z-index:4;opacity:1;&.isDragging{opacity:0.5;}\"]);\n\nconst Card = ({\n  id,\n  title,\n  listItemIndex,\n  moveCard,\n  left,\n  top,\n  boxes,\n  isListItem,\n  updateBoxes,\n  blobUrl,\n  children\n}) => {\n  const ref = useRef(null);\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n\n    hover(item, monitor) {\n      var _ref$current;\n\n      if (!ref.current || !item || !item.isListItem) {\n        return;\n      }\n\n      const dragIndex = item.listItemIndex;\n      const hoverIndex = listItemIndex; // Don't replace items with themselves\n\n      if (dragIndex === hoverIndex || id === item.id) {\n        return;\n      } // Determine rectangle on screen\n\n\n      const hoverBoundingRect = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.getBoundingClientRect(); // Get vertical middle\n\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n      const clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      } // Dragging upwards\n\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      } // Time to actually perform the action\n\n\n      moveCard(dragIndex, hoverIndex, Number(item.id)); // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n\n      item.listItemIndex = hoverIndex;\n    }\n\n  });\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type: ItemTypes.CARD,\n      id,\n      listItemIndex,\n      isListItem,\n      title,\n      top,\n      left,\n      ref,\n      blobUrl\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  drag(drop(ref));\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    ref: ref,\n    className: cn('listItem', {\n      isDragging\n    }),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Card;","map":{"version":3,"sources":["/Users/mfjvacas/Documents/Dev/GitHub/projects/mapstereo-client/components/ListItem.tsx"],"names":["React","useRef","cn","useDrag","useDrop","styled","ItemTypes","StyledCard","div","Card","id","title","listItemIndex","moveCard","left","top","boxes","isListItem","updateBoxes","blobUrl","children","ref","drop","accept","CARD","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","clientOffset","getClientOffset","hoverClientY","y","Number","isDragging","drag","type","collect"],"mappings":"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","sourcesContent":["import React, { useRef, SetStateAction, Dispatch } from 'react';\nimport cn from 'classnames';\nimport { useDrag, useDrop, DropTargetMonitor } from 'react-dnd';\nimport { XYCoord } from 'dnd-core';\nimport styled from 'styled-components';\nimport { ItemTypes } from './ItemTypes';\n\nexport interface CardProps {\n  id: any;\n  title: string;\n  listItemIndex: number;\n  left?: number;\n  top?: number;\n  blobUrl?: string;\n  moveCard: (\n    dragIndex: number,\n    hoverIndex: number,\n    cardId: number\n  ) => void;\n  boxes: Array<any>;\n  isListItem?: boolean;\n  updateBoxes?: Dispatch<SetStateAction<Array<any>>>;\n  children?: React.ReactElement;\n}\n\ninterface DragItem {\n  index: number;\n  id: string;\n  type: string;\n  isListItem: boolean;\n  listItemIndex: number;\n}\n\nconst StyledCard = styled.div`\n  position: relative;\n  margin-bottom: 0.5rem;\n  cursor: move;\n  z-index: 4;\n  opacity: 1;\n\n  &.isDragging {\n    opacity: 0.5;\n  }\n`;\n\nconst Card: React.FC<CardProps> = ({\n  id,\n  title,\n  listItemIndex,\n  moveCard,\n  left,\n  top,\n  boxes,\n  isListItem,\n  updateBoxes,\n  blobUrl,\n  children\n}: CardProps) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    hover(item: DragItem, monitor: DropTargetMonitor) {\n      if (!ref.current || !item || !item.isListItem) {\n        return;\n      }\n      \n      const dragIndex = item.listItemIndex;\n      const hoverIndex = listItemIndex;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex || id === item.id) {\n        return;\n      }\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n\n      // Get pixels to the top\n      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Time to actually perform the action\n      moveCard(dragIndex, hoverIndex, Number(item.id));\n\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.listItemIndex = hoverIndex;\n    },\n  });\n\n  const [{ isDragging }, drag] = useDrag({\n    item: {\n      type: ItemTypes.CARD,\n      id,\n      listItemIndex,\n      isListItem,\n      title,\n      top,\n      left,\n      ref,\n      blobUrl,\n    },\n    collect: (monitor: any) => ({\n      isDragging: monitor.isDragging(),\n    })\n  });\n\n  drag(drop(ref));\n\n  return (\n    <StyledCard\n      ref={ref}\n      className={cn('listItem', {\n        isDragging,\n      })}\n    >\n      {children}\n    </StyledCard>\n  );\n};\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}