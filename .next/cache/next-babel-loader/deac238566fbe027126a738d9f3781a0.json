{"ast":null,"code":"const S3 = require('aws-sdk/clients/s3');\n\nconst multer = require('multer');\n\nconst upload = multer();\nconst s3 = new S3({\n  apiVersion: '2006-03-01'\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\n\nfunction runMiddleware(req, res, fn) {\n  return new Promise((resolve, reject) => {\n    fn(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n}\n\nexport default (async (req, res) => {\n  if (req.method === 'POST') {\n    upload.single(\"soundBlob\")(async (req, {}, err) => {\n      try {\n        // let user = await User.findById(req.user._id);\n        // if (user.role !== \"admin\") {\n        //   return res.status(403).json({ error: \"You must be an admin to add product\" });\n        // }\n        await s3.upload({\n          Bucket: process.env.AWS_BUCKET,\n          Key: req.file.originalname,\n          Body: Buffer.from(new Uint8Array(req.file.buffer))\n        }, async (err, data) => {\n          if (err) {\n            console.log('error: ', err);\n            res.sendStatus(404);\n          }\n\n          res.send(`https://${process.env.AWS_BUCKET}/${escape(req.file.originalname)}`);\n        }); // const result = await cloudinary.v2.uploader.upload(req.file.path);\n        // req.body.image = result.secure_url;\n        // req.body.cloudinary_id = result.public_id;\n        // const product = new Product({\n        //   name,\n        //   price,\n        //   description,\n        //   image: req.body.image,\n        //   cloudinary_id: req.body.cloudinary_id,\n        // });\n        // await product.save();\n        // response.json(product);\n      } catch (err) {\n        console.log(err);\n      }\n    }); // const result = await runMiddleware(req, res, upload.single('soundBlob'));\n    // console.log('result', result);\n    // const result = await upload(req, res);\n    // console.log('result', result);\n    // const form = new formidable({ multiples: true });\n    // console.log('hello before form.parse');\n    // console.log('req.body', JSON.stringify(req.body));\n    // console.log('req', req);\n\n    res.end(); // return;\n    // await s3.upload(\n    //   {\n    //     Bucket: process.env.AWS_BUCKET,\n    //     Key: req.file.originalname,\n    //     Body: Buffer.from(new Uint8Array(req.file.buffer)),\n    //   },\n    //   async (err, data) => {\n    //     if (err) {\n    //       console.log('error: ', err);\n    //       res.sendStatus(404);\n    //     }\n    //     res.send(\n    //       `https://${process.env.AWS_BUCKET}/${escape(req.file.originalname)}`\n    //     );\n    //   }\n    // );\n    // console.log('req', req.body);\n  }\n});","map":{"version":3,"sources":["/Users/mfjvacas/Documents/Dev/GitHub/projects/mapstereo-client/pages/api/upload.ts"],"names":["S3","require","multer","upload","s3","apiVersion","config","api","bodyParser","runMiddleware","req","res","fn","Promise","resolve","reject","result","Error","method","single","err","Bucket","process","env","AWS_BUCKET","Key","file","originalname","Body","Buffer","from","Uint8Array","buffer","data","console","log","sendStatus","send","escape","end"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,oBAAD,CAAlB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,MAAM,GAAGD,MAAM,EAArB;AAEA,MAAME,EAAE,GAAG,IAAIJ,EAAJ,CAAO;AAAEK,EAAAA,UAAU,EAAE;AAAd,CAAP,CAAX;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;;AAMP,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,EAAjC,EAAqC;AACnC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCH,IAAAA,EAAE,CAACF,GAAD,EAAMC,GAAN,EAAYK,MAAD,IAAY;AACvB,UAAIA,MAAM,YAAYC,KAAtB,EAA6B;AAC3B,eAAOF,MAAM,CAACC,MAAD,CAAb;AACD;;AAED,aAAOF,OAAO,CAACE,MAAD,CAAd;AACD,KANC,CAAF;AAOD,GARM,CAAP;AASD;;AAED,gBAAe,OAAON,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAID,GAAG,CAACQ,MAAJ,KAAe,MAAnB,EAA2B;AACzBf,IAAAA,MAAM,CAACgB,MAAP,CAAc,WAAd,EAA2B,OAAOT,GAAP,EAAY,EAAZ,EAAgBU,GAAhB,KAAwB;AACjD,UAAI;AACF;AACA;AACA;AACA;AAEA,cAAMhB,EAAE,CAACD,MAAH,CACJ;AACEkB,UAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,UADtB;AAEEC,UAAAA,GAAG,EAAEf,GAAG,CAACgB,IAAJ,CAASC,YAFhB;AAGEC,UAAAA,IAAI,EAAEC,MAAM,CAACC,IAAP,CAAY,IAAIC,UAAJ,CAAerB,GAAG,CAACgB,IAAJ,CAASM,MAAxB,CAAZ;AAHR,SADI,EAMJ,OAAOZ,GAAP,EAAYa,IAAZ,KAAqB;AACnB,cAAIb,GAAJ,EAAS;AACPc,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBf,GAAvB;AACAT,YAAAA,GAAG,CAACyB,UAAJ,CAAe,GAAf;AACD;;AAEDzB,UAAAA,GAAG,CAAC0B,IAAJ,CACG,WAAUf,OAAO,CAACC,GAAR,CAAYC,UAAW,IAAGc,MAAM,CAAC5B,GAAG,CAACgB,IAAJ,CAASC,YAAV,CAAwB,EADrE;AAGD,SAfG,CAAN,CANE,CAwBF;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACD,OAtCD,CAsCE,OAAOP,GAAP,EAAY;AACZc,QAAAA,OAAO,CAACC,GAAR,CAAYf,GAAZ;AACD;AACF,KA1CD,EADyB,CA4CzB;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;;AAEAT,IAAAA,GAAG,CAAC4B,GAAJ,GA1DyB,CA2DzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEE;AACH;AACF,CAlFD","sourcesContent":["const S3 = require('aws-sdk/clients/s3');\nconst multer = require('multer');\nconst upload = multer();\n\nconst s3 = new S3({ apiVersion: '2006-03-01' });\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  }\n}\n\nfunction runMiddleware(req, res, fn) {\n  return new Promise((resolve, reject) => {\n    fn(req, res, (result) => {\n      if (result instanceof Error) {\n        return reject(result)\n      }\n\n      return resolve(result)\n    })\n  })\n}\n\nexport default async (req, res) => {\n  if (req.method === 'POST') {\n    upload.single(\"soundBlob\")(async (req, {}, err) => {\n      try {\n        // let user = await User.findById(req.user._id);\n        // if (user.role !== \"admin\") {\n        //   return res.status(403).json({ error: \"You must be an admin to add product\" });\n        // }\n\n        await s3.upload(\n          {\n            Bucket: process.env.AWS_BUCKET,\n            Key: req.file.originalname,\n            Body: Buffer.from(new Uint8Array(req.file.buffer)),\n          },\n          async (err, data) => {\n            if (err) {\n              console.log('error: ', err);\n              res.sendStatus(404);\n            }\n\n            res.send(\n              `https://${process.env.AWS_BUCKET}/${escape(req.file.originalname)}`\n            );\n          }\n        );\n\n        // const result = await cloudinary.v2.uploader.upload(req.file.path);\n        // req.body.image = result.secure_url;\n        // req.body.cloudinary_id = result.public_id;\n\n        // const product = new Product({\n        //   name,\n        //   price,\n        //   description,\n        //   image: req.body.image,\n        //   cloudinary_id: req.body.cloudinary_id,\n        // });\n\n        // await product.save();\n        // response.json(product);\n      } catch (err) {\n        console.log(err);\n      }\n    });\n    // const result = await runMiddleware(req, res, upload.single('soundBlob'));\n\n    // console.log('result', result);\n    \n    // const result = await upload(req, res);\n    // console.log('result', result);\n    \n    // const form = new formidable({ multiples: true });\n\n    // console.log('hello before form.parse');\n\n    // console.log('req.body', JSON.stringify(req.body));\n    // console.log('req', req);\n\n    res.end();\n    // return;\n\n    // await s3.upload(\n    //   {\n    //     Bucket: process.env.AWS_BUCKET,\n    //     Key: req.file.originalname,\n    //     Body: Buffer.from(new Uint8Array(req.file.buffer)),\n    //   },\n    //   async (err, data) => {\n    //     if (err) {\n    //       console.log('error: ', err);\n    //       res.sendStatus(404);\n    //     }\n\n    //     res.send(\n    //       `https://${process.env.AWS_BUCKET}/${escape(req.file.originalname)}`\n    //     );\n    //   }\n    // );\n\n      // console.log('req', req.body);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}